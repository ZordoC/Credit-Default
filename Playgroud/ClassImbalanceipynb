{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ZordoC/Credit-Default/blob/master/ClassImbalanceipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9q8SZ552dgKA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# The Basic-Kit \n",
        "import pandas as pd \n",
        "import numpy as np \n",
        "import time \n",
        "from IPython.display import display\n",
        "\n",
        "\n",
        "# Cleaning / pre-processing \n",
        "\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.utils import resample\n",
        "from imblearn.over_sampling import SMOTE\n",
        "# Vizualizations \n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt \n",
        "import seaborn as sns \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Modelling \n",
        "\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix,cohen_kappa_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn import tree\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lkh_BFaHdjK7",
        "colab_type": "text"
      },
      "source": [
        "\n",
        " \n",
        " <h5>\n",
        "    <font size = 7 color = 'green'  >  \n",
        "      \n",
        "      \n",
        "  <h1> <center>  Function-Space  </center></ h1>\n",
        " \n",
        "  </font>\n",
        "  </h5>\n",
        "  <br>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O3tE_RJJdlr_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def correlation(df, threshold):\n",
        "    df = df.copy(deep=True) # This is very important, if you dont do this you will update the df you passed through the function\n",
        "    col_corr = set() # Set of all the names of deleted columns\n",
        "    corr_matrix = df.corr()\n",
        "    for i in range(len(corr_matrix.columns)):\n",
        "        for j in range(i):\n",
        "            if (corr_matrix.iloc[i, j] >= threshold) and (corr_matrix.columns[j] not in col_corr):\n",
        "                colname = corr_matrix.columns[i] # getting the name of column\n",
        "                col_corr.add(colname)\n",
        "                if colname in df.columns:\n",
        "                    del df[colname] # deleting the column from the dataset\n",
        "\n",
        "    return df"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UeDfpO5IdmGB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def missing_percentage_data(df):\n",
        "    \n",
        "    \n",
        "    missing_values_count = df.isnull().sum()\n",
        "\n",
        "    total_cells = np.product(df.shape)\n",
        "    \n",
        "    total_missing = missing_values_count.sum()\n",
        "\n",
        "    missing_percent = (total_missing/total_cells) * 100\n",
        "\n",
        "    print('Percent of missing data of = {}%'.format(missing_percent))\n",
        "    \n",
        "    return "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NJN1Ouj2dppP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def near_zero_var(df,tresh):\n",
        "    df = df.copy(deep=True)\n",
        "    cols = df._get_numeric_data().columns\n",
        "    for i in range(len(cols)):\n",
        "        if df[cols[i]].var() <= tresh :\n",
        "            del df[cols[i]] \n",
        "    \n",
        "    return df \n",
        "    \n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m_YGXVwndrDp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def make_labels(ax, boxplot):\n",
        "\n",
        "    # Grab the relevant Line2D instances from the boxplot dictionary\n",
        "    iqr = boxplot['boxes'][0]\n",
        "    caps = boxplot['caps']\n",
        "    med = boxplot['medians'][0]\n",
        "    fly = boxplot['fliers'][0]\n",
        "\n",
        "    # The x position of the median line\n",
        "    xpos = med.get_xdata()\n",
        "\n",
        "    # Lets make the text have a horizontal offset which is some \n",
        "    # fraction of the width of the box\n",
        "    xoff = 0.10 * (xpos[1] - xpos[0])\n",
        "\n",
        "    # The x position of the labels\n",
        "    xlabel = xpos[1] + xoff\n",
        "\n",
        "    # The median is the y-position of the median line\n",
        "    median = med.get_ydata()[1]\n",
        "\n",
        "    # The 25th and 75th percentiles are found from the\n",
        "    # top and bottom (max and min) of the box\n",
        "    pc25 = iqr.get_ydata().min()\n",
        "    pc75 = iqr.get_ydata().max()\n",
        "\n",
        "    # The caps give the vertical position of the ends of the whiskers\n",
        "    capbottom = caps[0].get_ydata()[0]\n",
        "    captop = caps[1].get_ydata()[0]\n",
        "\n",
        "    # Make some labels on the figure using the values derived above\n",
        "    ax.text(xlabel, median,\n",
        "            'Median = {:6.3g}'.format(median), va='center')\n",
        "    ax.text(xlabel, pc25,\n",
        "            '25th percentile = {:6.3g}'.format(pc25), va='center')\n",
        "    ax.text(xlabel, pc75,\n",
        "            '75th percentile = {:6.3g}'.format(pc75), va='center')\n",
        "    ax.text(xlabel, capbottom,\n",
        "            'Bottom cap = {:6.3g}'.format(capbottom), va='center')\n",
        "    ax.text(xlabel, captop,\n",
        "            'Top cap = {:6.3g}'.format(captop), va='center')\n",
        "\n",
        "    # Many fliers, so we loop over them and create a label for each one\n",
        "    \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HCQWJCfq1iAC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def X_Y (df,label): # Introduce label in quotes ex: \"label\"\n",
        "    \n",
        "    \n",
        "    X = df[[i for i in list(df.columns) if i != label  ]]  # attributes\n",
        "    Y = df[label] # label , we can come here and choose to swap whenever we want \n",
        "    \n",
        "    return X,Y \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kzugsdKWdsUg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "url = 'https://raw.githubusercontent.com/ZordoC/Credit-Default/master/data.csv'\n",
        "\n",
        "df = pd.read_csv(url,header = 1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zL5fFtOaduHg",
        "colab_type": "code",
        "outputId": "77030981-4fc4-46bc-d281-907cdf460d3a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        }
      },
      "source": [
        "display(df.head())\n",
        "\n",
        "display(df.describe())\n",
        "\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>SEX</th>\n",
              "      <th>EDUCATION</th>\n",
              "      <th>MARRIAGE</th>\n",
              "      <th>AGE</th>\n",
              "      <th>PAY_0</th>\n",
              "      <th>PAY_2</th>\n",
              "      <th>PAY_3</th>\n",
              "      <th>PAY_4</th>\n",
              "      <th>PAY_5</th>\n",
              "      <th>PAY_6</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT2</th>\n",
              "      <th>BILL_AMT3</th>\n",
              "      <th>BILL_AMT4</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>BILL_AMT6</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <th>default payment next month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>-2</td>\n",
              "      <td>-2</td>\n",
              "      <td>3913</td>\n",
              "      <td>3102</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>120000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>26</td>\n",
              "      <td>-1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2682</td>\n",
              "      <td>1725</td>\n",
              "      <td>2682</td>\n",
              "      <td>3272</td>\n",
              "      <td>3455</td>\n",
              "      <td>3261</td>\n",
              "      <td>0</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>90000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>29239</td>\n",
              "      <td>14027</td>\n",
              "      <td>13559</td>\n",
              "      <td>14331</td>\n",
              "      <td>14948</td>\n",
              "      <td>15549</td>\n",
              "      <td>1518</td>\n",
              "      <td>1500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>5000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>50000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46990</td>\n",
              "      <td>48233</td>\n",
              "      <td>49291</td>\n",
              "      <td>28314</td>\n",
              "      <td>28959</td>\n",
              "      <td>29547</td>\n",
              "      <td>2000</td>\n",
              "      <td>2019</td>\n",
              "      <td>1200</td>\n",
              "      <td>1100</td>\n",
              "      <td>1069</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>50000</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>57</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8617</td>\n",
              "      <td>5670</td>\n",
              "      <td>35835</td>\n",
              "      <td>20940</td>\n",
              "      <td>19146</td>\n",
              "      <td>19131</td>\n",
              "      <td>2000</td>\n",
              "      <td>36681</td>\n",
              "      <td>10000</td>\n",
              "      <td>9000</td>\n",
              "      <td>689</td>\n",
              "      <td>679</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   ID  LIMIT_BAL  SEX  ...  PAY_AMT5  PAY_AMT6  default payment next month\n",
              "0   1      20000    2  ...         0         0                           1\n",
              "1   2     120000    2  ...         0      2000                           1\n",
              "2   3      90000    2  ...      1000      5000                           0\n",
              "3   4      50000    2  ...      1069      1000                           0\n",
              "4   5      50000    1  ...       689       679                           0\n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>SEX</th>\n",
              "      <th>EDUCATION</th>\n",
              "      <th>MARRIAGE</th>\n",
              "      <th>AGE</th>\n",
              "      <th>PAY_0</th>\n",
              "      <th>PAY_2</th>\n",
              "      <th>PAY_3</th>\n",
              "      <th>PAY_4</th>\n",
              "      <th>PAY_5</th>\n",
              "      <th>PAY_6</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT2</th>\n",
              "      <th>BILL_AMT3</th>\n",
              "      <th>BILL_AMT4</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>BILL_AMT6</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <th>default payment next month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>3.000000e+04</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>3.000000e+04</td>\n",
              "      <td>30000.00000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "      <td>30000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>15000.500000</td>\n",
              "      <td>167484.322667</td>\n",
              "      <td>1.603733</td>\n",
              "      <td>1.853133</td>\n",
              "      <td>1.551867</td>\n",
              "      <td>35.485500</td>\n",
              "      <td>-0.016700</td>\n",
              "      <td>-0.133767</td>\n",
              "      <td>-0.166200</td>\n",
              "      <td>-0.220667</td>\n",
              "      <td>-0.266200</td>\n",
              "      <td>-0.291100</td>\n",
              "      <td>51223.330900</td>\n",
              "      <td>49179.075167</td>\n",
              "      <td>4.701315e+04</td>\n",
              "      <td>43262.948967</td>\n",
              "      <td>40311.400967</td>\n",
              "      <td>38871.760400</td>\n",
              "      <td>5663.580500</td>\n",
              "      <td>5.921163e+03</td>\n",
              "      <td>5225.68150</td>\n",
              "      <td>4826.076867</td>\n",
              "      <td>4799.387633</td>\n",
              "      <td>5215.502567</td>\n",
              "      <td>0.221200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8660.398374</td>\n",
              "      <td>129747.661567</td>\n",
              "      <td>0.489129</td>\n",
              "      <td>0.790349</td>\n",
              "      <td>0.521970</td>\n",
              "      <td>9.217904</td>\n",
              "      <td>1.123802</td>\n",
              "      <td>1.197186</td>\n",
              "      <td>1.196868</td>\n",
              "      <td>1.169139</td>\n",
              "      <td>1.133187</td>\n",
              "      <td>1.149988</td>\n",
              "      <td>73635.860576</td>\n",
              "      <td>71173.768783</td>\n",
              "      <td>6.934939e+04</td>\n",
              "      <td>64332.856134</td>\n",
              "      <td>60797.155770</td>\n",
              "      <td>59554.107537</td>\n",
              "      <td>16563.280354</td>\n",
              "      <td>2.304087e+04</td>\n",
              "      <td>17606.96147</td>\n",
              "      <td>15666.159744</td>\n",
              "      <td>15278.305679</td>\n",
              "      <td>17777.465775</td>\n",
              "      <td>0.415062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>-165580.000000</td>\n",
              "      <td>-69777.000000</td>\n",
              "      <td>-1.572640e+05</td>\n",
              "      <td>-170000.000000</td>\n",
              "      <td>-81334.000000</td>\n",
              "      <td>-339603.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7500.750000</td>\n",
              "      <td>50000.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>3558.750000</td>\n",
              "      <td>2984.750000</td>\n",
              "      <td>2.666250e+03</td>\n",
              "      <td>2326.750000</td>\n",
              "      <td>1763.000000</td>\n",
              "      <td>1256.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>8.330000e+02</td>\n",
              "      <td>390.00000</td>\n",
              "      <td>296.000000</td>\n",
              "      <td>252.500000</td>\n",
              "      <td>117.750000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>15000.500000</td>\n",
              "      <td>140000.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>22381.500000</td>\n",
              "      <td>21200.000000</td>\n",
              "      <td>2.008850e+04</td>\n",
              "      <td>19052.000000</td>\n",
              "      <td>18104.500000</td>\n",
              "      <td>17071.000000</td>\n",
              "      <td>2100.000000</td>\n",
              "      <td>2.009000e+03</td>\n",
              "      <td>1800.00000</td>\n",
              "      <td>1500.000000</td>\n",
              "      <td>1500.000000</td>\n",
              "      <td>1500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>22500.250000</td>\n",
              "      <td>240000.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>67091.000000</td>\n",
              "      <td>64006.250000</td>\n",
              "      <td>6.016475e+04</td>\n",
              "      <td>54506.000000</td>\n",
              "      <td>50190.500000</td>\n",
              "      <td>49198.250000</td>\n",
              "      <td>5006.000000</td>\n",
              "      <td>5.000000e+03</td>\n",
              "      <td>4505.00000</td>\n",
              "      <td>4013.250000</td>\n",
              "      <td>4031.500000</td>\n",
              "      <td>4000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30000.000000</td>\n",
              "      <td>1000000.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>79.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>964511.000000</td>\n",
              "      <td>983931.000000</td>\n",
              "      <td>1.664089e+06</td>\n",
              "      <td>891586.000000</td>\n",
              "      <td>927171.000000</td>\n",
              "      <td>961664.000000</td>\n",
              "      <td>873552.000000</td>\n",
              "      <td>1.684259e+06</td>\n",
              "      <td>896040.00000</td>\n",
              "      <td>621000.000000</td>\n",
              "      <td>426529.000000</td>\n",
              "      <td>528666.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 ID       LIMIT_BAL  ...       PAY_AMT6  default payment next month\n",
              "count  30000.000000    30000.000000  ...   30000.000000                30000.000000\n",
              "mean   15000.500000   167484.322667  ...    5215.502567                    0.221200\n",
              "std     8660.398374   129747.661567  ...   17777.465775                    0.415062\n",
              "min        1.000000    10000.000000  ...       0.000000                    0.000000\n",
              "25%     7500.750000    50000.000000  ...     117.750000                    0.000000\n",
              "50%    15000.500000   140000.000000  ...    1500.000000                    0.000000\n",
              "75%    22500.250000   240000.000000  ...    4000.000000                    0.000000\n",
              "max    30000.000000  1000000.000000  ...  528666.000000                    1.000000\n",
              "\n",
              "[8 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9CEmot0ldvra",
        "colab_type": "code",
        "outputId": "f7a5d93d-97b7-40c2-e3ca-6c4d7d0c1f37",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        }
      },
      "source": [
        "missing_percentage_data(df)\n",
        "                        \n",
        "                        \n",
        "df.head()      "
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Percent of missing data of = 0.0%\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>SEX</th>\n",
              "      <th>EDUCATION</th>\n",
              "      <th>MARRIAGE</th>\n",
              "      <th>AGE</th>\n",
              "      <th>PAY_0</th>\n",
              "      <th>PAY_2</th>\n",
              "      <th>PAY_3</th>\n",
              "      <th>PAY_4</th>\n",
              "      <th>PAY_5</th>\n",
              "      <th>PAY_6</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT2</th>\n",
              "      <th>BILL_AMT3</th>\n",
              "      <th>BILL_AMT4</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>BILL_AMT6</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <th>default payment next month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>-2</td>\n",
              "      <td>-2</td>\n",
              "      <td>3913</td>\n",
              "      <td>3102</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>120000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>26</td>\n",
              "      <td>-1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2682</td>\n",
              "      <td>1725</td>\n",
              "      <td>2682</td>\n",
              "      <td>3272</td>\n",
              "      <td>3455</td>\n",
              "      <td>3261</td>\n",
              "      <td>0</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>90000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>29239</td>\n",
              "      <td>14027</td>\n",
              "      <td>13559</td>\n",
              "      <td>14331</td>\n",
              "      <td>14948</td>\n",
              "      <td>15549</td>\n",
              "      <td>1518</td>\n",
              "      <td>1500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>5000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>50000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46990</td>\n",
              "      <td>48233</td>\n",
              "      <td>49291</td>\n",
              "      <td>28314</td>\n",
              "      <td>28959</td>\n",
              "      <td>29547</td>\n",
              "      <td>2000</td>\n",
              "      <td>2019</td>\n",
              "      <td>1200</td>\n",
              "      <td>1100</td>\n",
              "      <td>1069</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>50000</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>57</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8617</td>\n",
              "      <td>5670</td>\n",
              "      <td>35835</td>\n",
              "      <td>20940</td>\n",
              "      <td>19146</td>\n",
              "      <td>19131</td>\n",
              "      <td>2000</td>\n",
              "      <td>36681</td>\n",
              "      <td>10000</td>\n",
              "      <td>9000</td>\n",
              "      <td>689</td>\n",
              "      <td>679</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   ID  LIMIT_BAL  SEX  ...  PAY_AMT5  PAY_AMT6  default payment next month\n",
              "0   1      20000    2  ...         0         0                           1\n",
              "1   2     120000    2  ...         0      2000                           1\n",
              "2   3      90000    2  ...      1000      5000                           0\n",
              "3   4      50000    2  ...      1069      1000                           0\n",
              "4   5      50000    1  ...       689       679                           0\n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SZXxvGEDd175",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = df.rename(columns = { 'default payment next month' : 'default_payment' })\n",
        "\n",
        "\n",
        "\n",
        "df['SEX'] = df.SEX.astype('category')\n",
        "df['MARRIAGE'] = df.MARRIAGE.astype('category')\n",
        "df['EDUCATION'] = df.EDUCATION.astype('category')\n",
        "df['default_payment'] = df.default_payment.astype('category')\n",
        "df['PAY_0'] = df.PAY_0.astype('category')\n",
        "df['PAY_2'] = df.PAY_2.astype('category')\n",
        "df['PAY_3'] = df.PAY_3.astype('category')\n",
        "df['PAY_4'] = df.PAY_4.astype('category')\n",
        "df['PAY_5'] = df.PAY_5.astype('category')\n",
        "df['PAY_6'] = df.PAY_6.astype('category')\n",
        "\n",
        "\n",
        "#df = df.drop(['ID'], axis = 1 )\n",
        "\n",
        "numericals =[i for i in df.columns if df.dtypes[i]=='int64']\n",
        "\n",
        "categoricals = list( ['SEX' , 'EDUCATION' , 'MARRIAGE' , 'default_payment', 'PAY_0','PAY_2','PAY_3','PAY_4','PAY_5','PAY_6' ] )\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Vzfg0WKidNM",
        "colab_type": "code",
        "outputId": "c690dbf6-c1e5-41a3-cac0-e87607a8e973",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "for cat in categoricals:\n",
        "  \n",
        "  print(df[cat].value_counts())    \n",
        "  \n",
        "  \n",
        "len(df)\n",
        "\n",
        "print (df['PAY_6'].value_counts())\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2    18112\n",
            "1    11888\n",
            "Name: SEX, dtype: int64\n",
            "2    14030\n",
            "1    10585\n",
            "3     4917\n",
            "5      280\n",
            "4      123\n",
            "6       51\n",
            "0       14\n",
            "Name: EDUCATION, dtype: int64\n",
            "2    15964\n",
            "1    13659\n",
            "3      323\n",
            "0       54\n",
            "Name: MARRIAGE, dtype: int64\n",
            "0    23364\n",
            "1     6636\n",
            "Name: default_payment, dtype: int64\n",
            " 0    14737\n",
            "-1     5686\n",
            " 1     3688\n",
            "-2     2759\n",
            " 2     2667\n",
            " 3      322\n",
            " 4       76\n",
            " 5       26\n",
            " 8       19\n",
            " 6       11\n",
            " 7        9\n",
            "Name: PAY_0, dtype: int64\n",
            " 0    15730\n",
            "-1     6050\n",
            " 2     3927\n",
            "-2     3782\n",
            " 3      326\n",
            " 4       99\n",
            " 1       28\n",
            " 5       25\n",
            " 7       20\n",
            " 6       12\n",
            " 8        1\n",
            "Name: PAY_2, dtype: int64\n",
            " 0    15764\n",
            "-1     5938\n",
            "-2     4085\n",
            " 2     3819\n",
            " 3      240\n",
            " 4       76\n",
            " 7       27\n",
            " 6       23\n",
            " 5       21\n",
            " 1        4\n",
            " 8        3\n",
            "Name: PAY_3, dtype: int64\n",
            " 0    16455\n",
            "-1     5687\n",
            "-2     4348\n",
            " 2     3159\n",
            " 3      180\n",
            " 4       69\n",
            " 7       58\n",
            " 5       35\n",
            " 6        5\n",
            " 8        2\n",
            " 1        2\n",
            "Name: PAY_4, dtype: int64\n",
            " 0    16947\n",
            "-1     5539\n",
            "-2     4546\n",
            " 2     2626\n",
            " 3      178\n",
            " 4       84\n",
            " 7       58\n",
            " 5       17\n",
            " 6        4\n",
            " 8        1\n",
            "Name: PAY_5, dtype: int64\n",
            " 0    16286\n",
            "-1     5740\n",
            "-2     4895\n",
            " 2     2766\n",
            " 3      184\n",
            " 4       49\n",
            " 7       46\n",
            " 6       19\n",
            " 5       13\n",
            " 8        2\n",
            "Name: PAY_6, dtype: int64\n",
            " 0    16286\n",
            "-1     5740\n",
            "-2     4895\n",
            " 2     2766\n",
            " 3      184\n",
            " 4       49\n",
            " 7       46\n",
            " 6       19\n",
            " 5       13\n",
            " 8        2\n",
            "Name: PAY_6, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0rb_ibVsmQJ6",
        "colab_type": "code",
        "outputId": "c6c57dd2-5170-4001-a34e-543e49035765",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "source": [
        "df = df[(df['MARRIAGE'] == 1) | (df['MARRIAGE'] ==  2)  ]\n",
        "\n",
        "\n",
        "df.head()\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>SEX</th>\n",
              "      <th>EDUCATION</th>\n",
              "      <th>MARRIAGE</th>\n",
              "      <th>AGE</th>\n",
              "      <th>PAY_0</th>\n",
              "      <th>PAY_2</th>\n",
              "      <th>PAY_3</th>\n",
              "      <th>PAY_4</th>\n",
              "      <th>PAY_5</th>\n",
              "      <th>PAY_6</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT2</th>\n",
              "      <th>BILL_AMT3</th>\n",
              "      <th>BILL_AMT4</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>BILL_AMT6</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <th>default_payment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>-2</td>\n",
              "      <td>-2</td>\n",
              "      <td>3913</td>\n",
              "      <td>3102</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>120000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>26</td>\n",
              "      <td>-1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2682</td>\n",
              "      <td>1725</td>\n",
              "      <td>2682</td>\n",
              "      <td>3272</td>\n",
              "      <td>3455</td>\n",
              "      <td>3261</td>\n",
              "      <td>0</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>90000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>29239</td>\n",
              "      <td>14027</td>\n",
              "      <td>13559</td>\n",
              "      <td>14331</td>\n",
              "      <td>14948</td>\n",
              "      <td>15549</td>\n",
              "      <td>1518</td>\n",
              "      <td>1500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>5000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>50000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46990</td>\n",
              "      <td>48233</td>\n",
              "      <td>49291</td>\n",
              "      <td>28314</td>\n",
              "      <td>28959</td>\n",
              "      <td>29547</td>\n",
              "      <td>2000</td>\n",
              "      <td>2019</td>\n",
              "      <td>1200</td>\n",
              "      <td>1100</td>\n",
              "      <td>1069</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>50000</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>57</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8617</td>\n",
              "      <td>5670</td>\n",
              "      <td>35835</td>\n",
              "      <td>20940</td>\n",
              "      <td>19146</td>\n",
              "      <td>19131</td>\n",
              "      <td>2000</td>\n",
              "      <td>36681</td>\n",
              "      <td>10000</td>\n",
              "      <td>9000</td>\n",
              "      <td>689</td>\n",
              "      <td>679</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   ID  LIMIT_BAL SEX EDUCATION  ... PAY_AMT4  PAY_AMT5 PAY_AMT6 default_payment\n",
              "0   1      20000   2         2  ...        0         0        0               1\n",
              "1   2     120000   2         2  ...     1000         0     2000               1\n",
              "2   3      90000   2         2  ...     1000      1000     5000               0\n",
              "3   4      50000   2         2  ...     1100      1069     1000               0\n",
              "4   5      50000   1         2  ...     9000       689      679               0\n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lHyjawR1d3nq",
        "colab_type": "code",
        "outputId": "75417367-9f78-4cd7-f06b-e352c89bb7aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        }
      },
      "source": [
        "plt.matshow(df[numericals].corr())\n",
        "plt.show()\n",
        "\n",
        "df[numericals].head()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQQAAAECCAYAAAAYUakXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEEFJREFUeJzt3W2MXNV9x/Hfb2eHJWsbP2AeEuzW\nNCJUBAFGVkSSKq3slDiEYqT2BVGITJPKb9qGREgIgtSo7yIlyoPUKpEFBBQs8gJIQhFPriGKqsam\nxjwZTGNKXDCx8dY4GGPjffr3xYyPFmvXOz5n5t5d8/1I1u7O3jP/M7Pr39575575OyIEAJLUV/cE\nAMwcBAKAhEAAkBAIABICAUBCIABIZkQg2F5t+79tv2L7lopqLrX9pO2XbL9o+8Yq6rZrN2w/Y/uh\nCmsusH2f7Zdt77D9yYrqfqP9/G63fa/t03tU507b+2xvn3DbItsbbe9sf1xYUd3vtJ/n523/3PaC\nKupO+N5NtsP24pO939oDwXZD0r9K+rykiyR90fZFFZQelXRTRFwk6QpJf19RXUm6UdKOimod80NJ\nj0bEn0q6tIr6ts+T9DVJKyLiYkkNSdf1qNxdklYfd9stkjZFxAWSNrW/rqLuRkkXR8Qlkn4r6daK\n6sr2UklXSnot505rDwRJn5D0SkS8GhHDkn4maU2vi0bEnojY1v78HbX+g5zX67q2l0j6gqTbe11r\nQs35kj4j6Q5JiojhiPhDReX7JX3Idr+kQUm/70WRiPi1pLeOu3mNpLvbn98t6doq6kbE4xEx2v5y\ns6QlVdRt+76kmyVlXXE4EwLhPEmvT/h6tyr4jzmR7WWSlkvaUkG5H6j1AxuvoNYx50sakvST9qHK\n7bbn9LpoRLwh6btq/bXaI+ntiHi813UnOCci9rQ/3yvpnAprH/MVSY9UUcj2GklvRMRzufcxEwKh\nVrbnSrpf0tcj4mCPa10taV9EPN3LOpPol3S5pB9FxHJJ76o3u8/v0z5mX6NWIH1E0hzb1/e67mSi\ndY1+pdfp275NrUPTDRXUGpT0TUn/VHI/MyEQ3pC0dMLXS9q39ZztplphsCEiHqig5KclXWN7l1qH\nRitt31NB3d2SdkfEsT2g+9QKiF77rKTfRcRQRIxIekDSpyqoe8ybtj8sSe2P+6oqbPsGSVdL+lJU\ns2Doo2oF73Pt368lkrbZPvdk7mQmBMJ/SbrA9vm2T1PrpNODvS5q22odU++IiO/1up4kRcStEbEk\nIpap9TifiIie/8WMiL2SXrd9YfumVZJe6nVdtQ4VrrA92H6+V6nak6kPSlrb/nytpF9WUdT2arUO\nC6+JiMNV1IyIFyLi7IhY1v792i3p8vbP/qTuqPZ/kq5S62zs/0i6raKaf6bWLuTzkp5t/7uqwsf8\nF5IeqrDeZZK2th/vLyQtrKjuP0t6WdJ2ST+VNNCjOveqdZ5ipP2f4auSzlTr1YWdkv5d0qKK6r6i\n1nmxY79XP66i7nHf3yVp8cner9uDAWBGHDIAmCEIBAAJgQAgIRAAJAQCgGTGBILtddQ9Net+kB7r\nbK87YwJBUi1PInVP2ZrUzTCTAgFAzSq9MGnxokYsW9qc9HtD+8d01pmNKcfufCF/cd6JHuFIvKdm\nb96z44Smq+uSO/fUo4fjPZ12groR3V+EORJH1fTA1Bv06FdwREfV1NR13Zf/9zDGp36epqvbKyeq\n+57e1XAcnfbXqr/rszqBZUubeuqxpdNvOInP/8kV2XWLQm+8nis53SjYeWtOHrqdiCNH8uvm1hwb\nq7ymJPXNnZs9dvzQofzCNVwdvCU2dbQdhwwAEgIBQFIUCHW8OSqA3skOhBrfHBVAj5TsIdTy5qgA\neqckEGp/c1QA3dXzk4q219neanvr0P56Xl4C0JmSQOjozVEjYn1ErIiIFSe68AhA/UoCoZY3RwXQ\nO9lXKkbEqO1/kPSYWi267oyIF7s2MwCVK7p0OSIelvRwl+YCoGZcqQggqXRx084X5mQvUnrk1c3Z\ndVf/1Zeyx779sXnZY12wcDAKorpkbO4yy5LHOrh3JHts30h+4eHB/JPcfaP5C5TG+4vWsmaJ//xN\nR9uxhwAgIRAAJAQCgIRAAJAQCAASAgFAQiAASAgEAAmBACAhEAAkBAKAhEAAkBAIABICAUBS6fLn\nUH6fxZIlzI/+24bssVddsip7bG1mWS/Lkn6SJX07+xv5y5/r6keZy0c7e47ZQwCQEAgAEgIBQFLS\n23Gp7Sdtv2T7Rds3dnNiAKpXclJxVNJNEbHN9jxJT9veGBEvdWluACqWvYcQEXsiYlv783ck7RC9\nHYFZrSvnEGwvk7Rc0pZu3B+AehRfh2B7rqT7JX09Ig5O8v11ktZJ0ukaLC0HoIeK9hBsN9UKgw0R\n8cBk20xs9tr06SXlAPRYyasMlnSHpB0R8b3uTQlAXUr2ED4t6cuSVtp+tv3vqi7NC0ANSro//4ey\nG38BmIm4UhFAQiAASCpd/iwpe3ltSRfmkiXMDz+/KXvsa6OHsse+PLwwe+zQ2Bn5Y0fznucDo3Oy\naz619tLssY2Dh7PHji4u6OxdsEo8GvlH2tHI/Bv+7JMdbcYeAoCEQACQEAgAEgIBQEIgAEgIBAAJ\ngQAgIRAAJAQCgIRAAJAQCAASAgFAQiAASAgEAEn1y58zebyeuiVLmP+of2722D+Mv5M9tg4N5a8H\nPvDx/OXai7bkd452SafrsfyxLvg7HH2ZdTscxh4CgIRAAJAQCACS4kCw3bD9jO2HujEhAPXpxh7C\njWo1egUwy5W2clsi6QuSbu/OdADUqXQP4QeSbpZU04uCALqppLfj1ZL2RcTT02y3zvZW21tH4r3c\ncgAqUNrb8RrbuyT9TK0ej/ccvxHdn4HZIzsQIuLWiFgSEcskXSfpiYi4vmszA1A5rkMAkHRlLUNE\n/ErSr7pxXwDqwx4CgIRAAJBUuvzZkpzZvTZqiq6SLswlS5gvOS3/FZnxyF+yPaJG3rjIGydJzSP5\nS4nfXHlu9tizNx/IHhuN/Mc7NpA/NluHDafZQwCQEAgAEgIBQEIgAEgIBAAJgQAgIRAAJAQCgIRA\nAJAQCAASAgFAQiAASAgEAAmBACCptvuzLTWbWUOLlj9H/vLaobH8zsQlSpYwXzYwkD12cGR/1rg5\nHs6u2TeS//OZv2ske+z+5flL2898On/pdN9wQffnZm+XTrOHACAhEAAkBAKApLS34wLb99l+2fYO\n25/s1sQAVK/0pOIPJT0aEX9j+zRJg12YE4CaZAeC7fmSPiPpBkmKiGFJ+aeaAdSu5JDhfElDkn5i\n+xnbt9ue06V5AahBSSD0S7pc0o8iYrmkdyXdcvxGE7s/D9P9GZjRSgJht6TdEbGl/fV9agXE+0zs\n/nwa3Z+BGa2k+/NeSa/bvrB90ypJL3VlVgBqUfoqwz9K2tB+heFVSX9bPiUAdSkKhIh4VtKKLs0F\nQM24UhFAQiAASCpd/hwxrjhyJG9wh91rJzVesPx5dF5B4Xy5XZil/CXMkvSxZt6lJE0dzK5Zsvy5\ncXg0e+zAO/nP8YHLFmSPXbg9/7kazx3Y4VPMHgKAhEAAkBAIABICAUBCIABICAQACYEAICEQACQE\nAoCEQACQEAgAEgIBQEIgAEiqbfZawNnLvMocGM1/I+lGp0vMJjES+SvxShqv5q5aPL85N7tm33D+\nD9cFK1n7hvPHNvOHav+l87PHLt48lDXOY509x+whAEgIBAAJgQAgIRAAJKXdn79h+0Xb223fa9OJ\nBZjNsgPB9nmSviZpRURcLKkh6bpuTQxA9UoPGfolfch2v1qt4H9fPiUAdSlp5faGpO9Kek3SHklv\nR8Tj3ZoYgOqVHDIslLRGrbbwH5E0x/b1k2yXuj+PxNH8mQLouZJDhs9K+l1EDEXEiKQHJH3q+I0m\ndn9ueqCgHIBeKwmE1yRdYXvQttXq/ryjO9MCUIeScwhbJN0naZukF9r3tb5L8wJQg9Luz9+S9K0u\nzQVAzbhSEUBS7fLnkGJsLGvo4N6R/LK5DWYlPbX20uyxBz5+RvbY5pGCZb0FzVNzx5YsYd50zx3Z\nY1fe8HfZYwcO5C8TbxzKf8VsTjN/afvIWXnLzGN3Z3/72UMAkBAIABICAUBCIABICAQACYEAICEQ\nACQEAoCEQACQEAgAEgIBQEIgAEgIBAAJgQAgmTXdn/tG8pfXRuQvB24cPJw9dtGW/GXXb648N3vs\n/F35S8Ubh0ezxpV0YS5ZwvzEXbdnj73yr9dmj/Vw3vMkSaML8vsZNQ5lLtnu8OfDHgKAhEAAkBAI\nAJJpA8H2nbb32d4+4bZFtjfa3tn+uLC30wRQhU72EO6StPq4226RtCkiLpC0qf01gFlu2kCIiF9L\neuu4m9dIurv9+d2Sru3yvADUIPccwjkRsaf9+V5J53RpPgBqVHxSMVov8k/5Iuf7mr2KZq/ATJYb\nCG/a/rAktT/um2rD9zV7Fc1egZksNxAelHTsMq+1kn7ZnekAqFMnLzveK+k3ki60vdv2VyV9W9Jf\n2t6pVlv4b/d2mgCqMO1ahoj44hTfWtXluQCoGVcqAkgIBABJpcuf3denvrl53WuHB/M75vY38seO\nLp6XPbZkSfDZmw9kj92/PP9K8oF38p6rvuH8x1rShblkCfPj9989/UZT+Ny1X84e23c0rwO6JMnO\nH9sB9hAAJAQCgIRAAJAQCAASAgFAQiAASAgEAAmBACAhEAAkBAKAhEAAkBAIABICAUBCIABIKl3+\nHOPjGj90KGts32j+8toYy19u6vyy0ljBnAuWbJ/5dP7S6QOXLcga1yx4nhqH8t+Nu6QLc8kS5sd+\n8dPssauvuT57rAo6mXeCPQQACYEAICEQACS53Z+/Y/tl28/b/rntvANPADNKbvfnjZIujohLJP1W\n0q1dnheAGmR1f46IxyPi2OndzZKW9GBuACrWjXMIX5H0SBfuB0DNiq5DsH2bpFFJG06wzTpJ6yTp\ndA2WlAPQY9mBYPsGSVdLWtVuCT+piFgvab0kneFFvb2qAkCRrECwvVrSzZL+PCIOd3dKAOqS2/35\nXyTNk7TR9rO2f9zjeQKoQG735zt6MBcANeNKRQAJgQAgqXT5s6Ts5Zvj/b3tejuVaOTXdUHejg3k\nL3/uG86vu3D7waxx+y+dn11zTrOgO/eC07PHlnRhLlnC/OiD99RStxPsIQBICAQACYEAICEQACQE\nAoCEQACQEAgAEgIBQEIgAEgIBAAJgQAgIRAAJAQCgIRAAJBUv/x5lolGfmZGXz3vKRsFy4nHM8ct\n3jyUXXPkrLnZYxuHhrPHygVL6gu6MNexdPoTn3tr+o3EHgKACQgEAAmBACDJ6v484Xs32Q7bi3sz\nPQBVyu3+LNtLJV0p6bUuzwlATbK6P7d9X63uTbRnA04RWecQbK+R9EZEPNfl+QCo0Ulfh2B7UNI3\n1Tpc6GR7uj8Ds0TOHsJHJZ0v6TnbuyQtkbTN9rmTbRwR6yNiRUSsaGogf6YAeu6k9xAi4gVJZx/7\nuh0KKyLi/7o4LwA1yO3+DOAUlNv9eeL3l3VtNgBqxZWKABICAUDiKFjGedLF7CFJ/zvFtxdLquPE\nJHVPzZrUfb8/joizpruDSgPhRGxvjYgV1D316n6QHutsr8shA4CEQACQzKRAWE/dU7buB+mxzuq6\nM+YcAoD6zaQ9BAA1IxAAJAQCgIRAAJAQCACS/wcA3AXId2DISwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>AGE</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT2</th>\n",
              "      <th>BILL_AMT3</th>\n",
              "      <th>BILL_AMT4</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>BILL_AMT6</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20000</td>\n",
              "      <td>24</td>\n",
              "      <td>3913</td>\n",
              "      <td>3102</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>120000</td>\n",
              "      <td>26</td>\n",
              "      <td>2682</td>\n",
              "      <td>1725</td>\n",
              "      <td>2682</td>\n",
              "      <td>3272</td>\n",
              "      <td>3455</td>\n",
              "      <td>3261</td>\n",
              "      <td>0</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>90000</td>\n",
              "      <td>34</td>\n",
              "      <td>29239</td>\n",
              "      <td>14027</td>\n",
              "      <td>13559</td>\n",
              "      <td>14331</td>\n",
              "      <td>14948</td>\n",
              "      <td>15549</td>\n",
              "      <td>1518</td>\n",
              "      <td>1500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>50000</td>\n",
              "      <td>37</td>\n",
              "      <td>46990</td>\n",
              "      <td>48233</td>\n",
              "      <td>49291</td>\n",
              "      <td>28314</td>\n",
              "      <td>28959</td>\n",
              "      <td>29547</td>\n",
              "      <td>2000</td>\n",
              "      <td>2019</td>\n",
              "      <td>1200</td>\n",
              "      <td>1100</td>\n",
              "      <td>1069</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>50000</td>\n",
              "      <td>57</td>\n",
              "      <td>8617</td>\n",
              "      <td>5670</td>\n",
              "      <td>35835</td>\n",
              "      <td>20940</td>\n",
              "      <td>19146</td>\n",
              "      <td>19131</td>\n",
              "      <td>2000</td>\n",
              "      <td>36681</td>\n",
              "      <td>10000</td>\n",
              "      <td>9000</td>\n",
              "      <td>689</td>\n",
              "      <td>679</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   ID  LIMIT_BAL  AGE  BILL_AMT1  ...  PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6\n",
              "0   1      20000   24       3913  ...         0         0         0         0\n",
              "1   2     120000   26       2682  ...      1000      1000         0      2000\n",
              "2   3      90000   34      29239  ...      1000      1000      1000      5000\n",
              "3   4      50000   37      46990  ...      1200      1100      1069      1000\n",
              "4   5      50000   57       8617  ...     10000      9000       689       679\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gqZ1tF0Dd5-y",
        "colab_type": "code",
        "outputId": "2183f5b9-3f2f-4d9c-bdf3-7ed458dedbab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        }
      },
      "source": [
        "df_n = correlation(df[numericals], .85)\n",
        "\n",
        "plt.matshow(df_n.corr())\n",
        "plt.show()\n",
        "\n",
        "df_n.corr()\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\noKsswQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>AGE</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.024858</td>\n",
              "      <td>0.021129</td>\n",
              "      <td>0.019586</td>\n",
              "      <td>0.015950</td>\n",
              "      <td>0.006854</td>\n",
              "      <td>0.005905</td>\n",
              "      <td>0.037669</td>\n",
              "      <td>0.005254</td>\n",
              "      <td>0.000907</td>\n",
              "      <td>0.002181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <td>0.024858</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.152338</td>\n",
              "      <td>0.284431</td>\n",
              "      <td>0.294695</td>\n",
              "      <td>0.202561</td>\n",
              "      <td>0.184466</td>\n",
              "      <td>0.217434</td>\n",
              "      <td>0.206667</td>\n",
              "      <td>0.217260</td>\n",
              "      <td>0.219322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AGE</th>\n",
              "      <td>0.021129</td>\n",
              "      <td>0.152338</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.058015</td>\n",
              "      <td>0.051514</td>\n",
              "      <td>0.028193</td>\n",
              "      <td>0.022815</td>\n",
              "      <td>0.031483</td>\n",
              "      <td>0.022176</td>\n",
              "      <td>0.023052</td>\n",
              "      <td>0.021651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <td>0.019586</td>\n",
              "      <td>0.284431</td>\n",
              "      <td>0.058015</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.830100</td>\n",
              "      <td>0.144828</td>\n",
              "      <td>0.101181</td>\n",
              "      <td>0.161747</td>\n",
              "      <td>0.160720</td>\n",
              "      <td>0.167622</td>\n",
              "      <td>0.178568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <td>0.015950</td>\n",
              "      <td>0.294695</td>\n",
              "      <td>0.051514</td>\n",
              "      <td>0.830100</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.220827</td>\n",
              "      <td>0.183171</td>\n",
              "      <td>0.257113</td>\n",
              "      <td>0.296015</td>\n",
              "      <td>0.143432</td>\n",
              "      <td>0.162989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <td>0.006854</td>\n",
              "      <td>0.202561</td>\n",
              "      <td>0.028193</td>\n",
              "      <td>0.144828</td>\n",
              "      <td>0.220827</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.213859</td>\n",
              "      <td>0.180239</td>\n",
              "      <td>0.141027</td>\n",
              "      <td>0.155918</td>\n",
              "      <td>0.181446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <td>0.005905</td>\n",
              "      <td>0.184466</td>\n",
              "      <td>0.022815</td>\n",
              "      <td>0.101181</td>\n",
              "      <td>0.183171</td>\n",
              "      <td>0.213859</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.172185</td>\n",
              "      <td>0.119435</td>\n",
              "      <td>0.189641</td>\n",
              "      <td>0.151493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <td>0.037669</td>\n",
              "      <td>0.217434</td>\n",
              "      <td>0.031483</td>\n",
              "      <td>0.161747</td>\n",
              "      <td>0.257113</td>\n",
              "      <td>0.180239</td>\n",
              "      <td>0.172185</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.161345</td>\n",
              "      <td>0.166916</td>\n",
              "      <td>0.156559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <td>0.005254</td>\n",
              "      <td>0.206667</td>\n",
              "      <td>0.022176</td>\n",
              "      <td>0.160720</td>\n",
              "      <td>0.296015</td>\n",
              "      <td>0.141027</td>\n",
              "      <td>0.119435</td>\n",
              "      <td>0.161345</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.156307</td>\n",
              "      <td>0.151685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <td>0.000907</td>\n",
              "      <td>0.217260</td>\n",
              "      <td>0.023052</td>\n",
              "      <td>0.167622</td>\n",
              "      <td>0.143432</td>\n",
              "      <td>0.155918</td>\n",
              "      <td>0.189641</td>\n",
              "      <td>0.166916</td>\n",
              "      <td>0.156307</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.156730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <td>0.002181</td>\n",
              "      <td>0.219322</td>\n",
              "      <td>0.021651</td>\n",
              "      <td>0.178568</td>\n",
              "      <td>0.162989</td>\n",
              "      <td>0.181446</td>\n",
              "      <td>0.151493</td>\n",
              "      <td>0.156559</td>\n",
              "      <td>0.151685</td>\n",
              "      <td>0.156730</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 ID  LIMIT_BAL       AGE  ...  PAY_AMT4  PAY_AMT5  PAY_AMT6\n",
              "ID         1.000000   0.024858  0.021129  ...  0.005254  0.000907  0.002181\n",
              "LIMIT_BAL  0.024858   1.000000  0.152338  ...  0.206667  0.217260  0.219322\n",
              "AGE        0.021129   0.152338  1.000000  ...  0.022176  0.023052  0.021651\n",
              "BILL_AMT1  0.019586   0.284431  0.058015  ...  0.160720  0.167622  0.178568\n",
              "BILL_AMT5  0.015950   0.294695  0.051514  ...  0.296015  0.143432  0.162989\n",
              "PAY_AMT1   0.006854   0.202561  0.028193  ...  0.141027  0.155918  0.181446\n",
              "PAY_AMT2   0.005905   0.184466  0.022815  ...  0.119435  0.189641  0.151493\n",
              "PAY_AMT3   0.037669   0.217434  0.031483  ...  0.161345  0.166916  0.156559\n",
              "PAY_AMT4   0.005254   0.206667  0.022176  ...  1.000000  0.156307  0.151685\n",
              "PAY_AMT5   0.000907   0.217260  0.023052  ...  0.156307  1.000000  0.156730\n",
              "PAY_AMT6   0.002181   0.219322  0.021651  ...  0.151685  0.156730  1.000000\n",
              "\n",
              "[11 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PfdW1PVZd_nf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "cols1 = list(df_n.columns)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rOpgpsAyeIdo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "categoricals = list( ['SEX' , 'EDUCATION' , 'MARRIAGE' , 'default_payment', 'PAY_0','PAY_2','PAY_3','PAY_4','PAY_5' ] )\n",
        "\n",
        "\n",
        "cols =  cols1 + categoricals "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GmYIDf8teL-A",
        "colab_type": "code",
        "outputId": "fcebb370-78dd-4c77-ba9a-854df5294c19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "source": [
        "df = df[cols]\n",
        "df.head()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>LIMIT_BAL</th>\n",
              "      <th>AGE</th>\n",
              "      <th>BILL_AMT1</th>\n",
              "      <th>BILL_AMT5</th>\n",
              "      <th>PAY_AMT1</th>\n",
              "      <th>PAY_AMT2</th>\n",
              "      <th>PAY_AMT3</th>\n",
              "      <th>PAY_AMT4</th>\n",
              "      <th>PAY_AMT5</th>\n",
              "      <th>PAY_AMT6</th>\n",
              "      <th>SEX</th>\n",
              "      <th>EDUCATION</th>\n",
              "      <th>MARRIAGE</th>\n",
              "      <th>default_payment</th>\n",
              "      <th>PAY_0</th>\n",
              "      <th>PAY_2</th>\n",
              "      <th>PAY_3</th>\n",
              "      <th>PAY_4</th>\n",
              "      <th>PAY_5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20000</td>\n",
              "      <td>24</td>\n",
              "      <td>3913</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>-2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>120000</td>\n",
              "      <td>26</td>\n",
              "      <td>2682</td>\n",
              "      <td>3455</td>\n",
              "      <td>0</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>90000</td>\n",
              "      <td>34</td>\n",
              "      <td>29239</td>\n",
              "      <td>14948</td>\n",
              "      <td>1518</td>\n",
              "      <td>1500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>5000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>50000</td>\n",
              "      <td>37</td>\n",
              "      <td>46990</td>\n",
              "      <td>28959</td>\n",
              "      <td>2000</td>\n",
              "      <td>2019</td>\n",
              "      <td>1200</td>\n",
              "      <td>1100</td>\n",
              "      <td>1069</td>\n",
              "      <td>1000</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>50000</td>\n",
              "      <td>57</td>\n",
              "      <td>8617</td>\n",
              "      <td>19146</td>\n",
              "      <td>2000</td>\n",
              "      <td>36681</td>\n",
              "      <td>10000</td>\n",
              "      <td>9000</td>\n",
              "      <td>689</td>\n",
              "      <td>679</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   ID  LIMIT_BAL  AGE  BILL_AMT1  BILL_AMT5  ...  PAY_0  PAY_2  PAY_3  PAY_4  PAY_5\n",
              "0   1      20000   24       3913          0  ...      2      2     -1     -1     -2\n",
              "1   2     120000   26       2682       3455  ...     -1      2      0      0      0\n",
              "2   3      90000   34      29239      14948  ...      0      0      0      0      0\n",
              "3   4      50000   37      46990      28959  ...      0      0      0      0      0\n",
              "4   5      50000   57       8617      19146  ...     -1      0     -1      0      0\n",
              "\n",
              "[5 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WIknD-h_ezmC",
        "colab_type": "code",
        "outputId": "0f6518d2-7847-4c16-e5ea-539c17d0cdd0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "X,y = X_Y(df,'default_payment')\n",
        "\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=27,shuffle=True)\n",
        "\n",
        "print(\"train has {} features\".format(len(X_train.columns)))\n",
        "\n",
        "print(\"test has {} features\".format(len(X_test.columns)))\n",
        "\n",
        "\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train has 19 features\n",
            "test has 19 features\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cKFv39atyzK-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ffc52ff1-4bff-4854-c3e9-461252ea9758"
      },
      "source": [
        "len(y_test)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5925"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CRiUs7E8kyx7",
        "colab_type": "code",
        "outputId": "02e36243-1ef1-41e4-fa24-81930adbe8a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators = 400 , verbose = 2,n_jobs=-1) \n",
        "\n",
        "\n",
        "rfc.fit(X_train,y_train)\n",
        "\n",
        "predictions = rfc.predict(X_test)\n",
        "\n",
        "print(\"Confusion Matrix\")\n",
        "print(confusion_matrix(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Accuracy is\",accuracy_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Kappa is\",cohen_kappa_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"--- Run Time %s mins ---\" %np.round(((time.time()-start_time)/60),2))\n",
        "print(\"\\n\")\n",
        "\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 2 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 2 of 400\n",
            "building tree 1 of 400\n",
            "building tree 3 of 400\n",
            "building tree 4 of 400\n",
            "building tree 5 of 400\n",
            "building tree 6 of 400\n",
            "building tree 7 of 400\n",
            "building tree 8 of 400\n",
            "building tree 9 of 400\n",
            "building tree 10 of 400\n",
            "building tree 11 of 400\n",
            "building tree 12 of 400\n",
            "building tree 13 of 400\n",
            "building tree 14 of 400\n",
            "building tree 15 of 400\n",
            "building tree 16 of 400\n",
            "building tree 17 of 400\n",
            "building tree 18 of 400\n",
            "building tree 19 of 400building tree 20 of 400\n",
            "\n",
            "building tree 21 of 400\n",
            "building tree 22 of 400\n",
            "building tree 23 of 400\n",
            "building tree 24 of 400\n",
            "building tree 25 of 400\n",
            "building tree 26 of 400\n",
            "building tree 27 of 400\n",
            "building tree 28 of 400\n",
            "building tree 29 of 400\n",
            "building tree 30 of 400\n",
            "building tree 31 of 400\n",
            "building tree 32 of 400\n",
            "building tree 33 of 400\n",
            "building tree 34 of 400\n",
            "building tree 35 of 400\n",
            "building tree 36 of 400\n",
            "building tree 37 of 400\n",
            "building tree 38 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:    2.0s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 39 of 400\n",
            "building tree 40 of 400\n",
            "building tree 41 of 400\n",
            "building tree 42 of 400\n",
            "building tree 43 of 400\n",
            "building tree 44 of 400\n",
            "building tree 45 of 400\n",
            "building tree 46 of 400\n",
            "building tree 47 of 400\n",
            "building tree 48 of 400\n",
            "building tree 49 of 400\n",
            "building tree 50 of 400\n",
            "building tree 51 of 400\n",
            "building tree 52 of 400\n",
            "building tree 53 of 400\n",
            "building tree 54 of 400\n",
            "building tree 55 of 400\n",
            "building tree 56 of 400\n",
            "building tree 57 of 400\n",
            "building tree 58 of 400\n",
            "building tree 59 of 400\n",
            "building tree 60 of 400\n",
            "building tree 61 of 400\n",
            "building tree 62 of 400\n",
            "building tree 63 of 400\n",
            "building tree 64 of 400\n",
            "building tree 65 of 400\n",
            "building tree 66 of 400\n",
            "building tree 67 of 400\n",
            "building tree 68 of 400\n",
            "building tree 69 of 400\n",
            "building tree 70 of 400\n",
            "building tree 71 of 400\n",
            "building tree 72 of 400\n",
            "building tree 73 of 400\n",
            "building tree 74 of 400\n",
            "building tree 75 of 400\n",
            "building tree 76 of 400\n",
            "building tree 77 of 400\n",
            "building tree 78 of 400\n",
            "building tree 79 of 400\n",
            "building tree 80 of 400\n",
            "building tree 81 of 400\n",
            "building tree 82 of 400\n",
            "building tree 83 of 400\n",
            "building tree 84 of 400\n",
            "building tree 85 of 400\n",
            "building tree 86 of 400\n",
            "building tree 87 of 400\n",
            "building tree 88 of 400\n",
            "building tree 89 of 400\n",
            "building tree 90 of 400\n",
            "building tree 91 of 400\n",
            "building tree 92 of 400\n",
            "building tree 93 of 400\n",
            "building tree 94 of 400\n",
            "building tree 95 of 400\n",
            "building tree 96 of 400\n",
            "building tree 97 of 400\n",
            "building tree 98 of 400\n",
            "building tree 99 of 400\n",
            "building tree 100 of 400\n",
            "building tree 101 of 400\n",
            "building tree 102 of 400\n",
            "building tree 103 of 400\n",
            "building tree 104 of 400\n",
            "building tree 105 of 400\n",
            "building tree 106 of 400\n",
            "building tree 107 of 400\n",
            "building tree 108 of 400\n",
            "building tree 109 of 400\n",
            "building tree 110 of 400\n",
            "building tree 111 of 400\n",
            "building tree 112 of 400\n",
            "building tree 113 of 400\n",
            "building tree 114 of 400\n",
            "building tree 115 of 400\n",
            "building tree 116 of 400\n",
            "building tree 117 of 400\n",
            "building tree 118 of 400\n",
            "building tree 119 of 400\n",
            "building tree 120 of 400\n",
            "building tree 121 of 400\n",
            "building tree 122 of 400\n",
            "building tree 123 of 400\n",
            "building tree 124 of 400\n",
            "building tree 125 of 400\n",
            "building tree 126 of 400\n",
            "building tree 127 of 400\n",
            "building tree 128 of 400\n",
            "building tree 129 of 400\n",
            "building tree 130 of 400\n",
            "building tree 131 of 400\n",
            "building tree 132 of 400\n",
            "building tree 133 of 400\n",
            "building tree 134 of 400\n",
            "building tree 135 of 400\n",
            "building tree 136 of 400\n",
            "building tree 137 of 400\n",
            "building tree 138 of 400\n",
            "building tree 139 of 400\n",
            "building tree 140 of 400\n",
            "building tree 141 of 400\n",
            "building tree 142 of 400\n",
            "building tree 143 of 400\n",
            "building tree 144 of 400\n",
            "building tree 145 of 400\n",
            "building tree 146 of 400\n",
            "building tree 147 of 400\n",
            "building tree 148 of 400\n",
            "building tree 149 of 400\n",
            "building tree 150 of 400\n",
            "building tree 151 of 400\n",
            "building tree 152 of 400\n",
            "building tree 153 of 400\n",
            "building tree 154 of 400\n",
            "building tree 155 of 400\n",
            "building tree 156 of 400\n",
            "building tree 157 of 400\n",
            "building tree 158 of 400\n",
            "building tree 159 of 400\n",
            "building tree 160 of 400\n",
            "building tree 161 of 400\n",
            "building tree 162 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 158 tasks      | elapsed:    8.3s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 163 of 400\n",
            "building tree 164 of 400\n",
            "building tree 165 of 400\n",
            "building tree 166 of 400\n",
            "building tree 167 of 400\n",
            "building tree 168 of 400\n",
            "building tree 169 of 400\n",
            "building tree 170 of 400\n",
            "building tree 171 of 400\n",
            "building tree 172 of 400\n",
            "building tree 173 of 400\n",
            "building tree 174 of 400\n",
            "building tree 175 of 400\n",
            "building tree 176 of 400\n",
            "building tree 177 of 400\n",
            "building tree 178 of 400\n",
            "building tree 179 of 400\n",
            "building tree 180 of 400\n",
            "building tree 181 of 400\n",
            "building tree 182 of 400\n",
            "building tree 183 of 400\n",
            "building tree 184 of 400\n",
            "building tree 185 of 400\n",
            "building tree 186 of 400\n",
            "building tree 187 of 400\n",
            "building tree 188 of 400\n",
            "building tree 189 of 400\n",
            "building tree 190 of 400\n",
            "building tree 191 of 400\n",
            "building tree 192 of 400\n",
            "building tree 193 of 400\n",
            "building tree 194 of 400\n",
            "building tree 195 of 400\n",
            "building tree 196 of 400\n",
            "building tree 197 of 400\n",
            "building tree 198 of 400\n",
            "building tree 199 of 400\n",
            "building tree 200 of 400\n",
            "building tree 201 of 400\n",
            "building tree 202 of 400\n",
            "building tree 203 of 400\n",
            "building tree 204 of 400\n",
            "building tree 205 of 400building tree 206 of 400\n",
            "\n",
            "building tree 207 of 400\n",
            "building tree 208 of 400\n",
            "building tree 209 of 400\n",
            "building tree 210 of 400\n",
            "building tree 211 of 400\n",
            "building tree 212 of 400\n",
            "building tree 213 of 400\n",
            "building tree 214 of 400\n",
            "building tree 215 of 400\n",
            "building tree 216 of 400\n",
            "building tree 217 of 400\n",
            "building tree 218 of 400\n",
            "building tree 219 of 400\n",
            "building tree 220 of 400\n",
            "building tree 221 of 400\n",
            "building tree 222 of 400\n",
            "building tree 223 of 400\n",
            "building tree 224 of 400\n",
            "building tree 225 of 400\n",
            "building tree 226 of 400\n",
            "building tree 227 of 400\n",
            "building tree 228 of 400\n",
            "building tree 229 of 400\n",
            "building tree 230 of 400\n",
            "building tree 231 of 400\n",
            "building tree 232 of 400\n",
            "building tree 233 of 400\n",
            "building tree 234 of 400\n",
            "building tree 235 of 400\n",
            "building tree 236 of 400\n",
            "building tree 237 of 400\n",
            "building tree 238 of 400\n",
            "building tree 239 of 400\n",
            "building tree 240 of 400\n",
            "building tree 241 of 400\n",
            "building tree 242 of 400\n",
            "building tree 243 of 400\n",
            "building tree 244 of 400\n",
            "building tree 245 of 400\n",
            "building tree 246 of 400\n",
            "building tree 247 of 400\n",
            "building tree 248 of 400\n",
            "building tree 249 of 400\n",
            "building tree 250 of 400\n",
            "building tree 251 of 400\n",
            "building tree 252 of 400\n",
            "building tree 253 of 400\n",
            "building tree 254 of 400\n",
            "building tree 255 of 400\n",
            "building tree 256 of 400\n",
            "building tree 257 of 400\n",
            "building tree 258 of 400\n",
            "building tree 259 of 400\n",
            "building tree 260 of 400\n",
            "building tree 261 of 400\n",
            "building tree 262 of 400\n",
            "building tree 263 of 400\n",
            "building tree 264 of 400\n",
            "building tree 265 of 400\n",
            "building tree 266 of 400\n",
            "building tree 267 of 400\n",
            "building tree 268 of 400\n",
            "building tree 269 of 400\n",
            "building tree 270 of 400\n",
            "building tree 271 of 400\n",
            "building tree 272 of 400\n",
            "building tree 273 of 400\n",
            "building tree 274 of 400\n",
            "building tree 275 of 400\n",
            "building tree 276 of 400\n",
            "building tree 277 of 400\n",
            "building tree 278 of 400\n",
            "building tree 279 of 400\n",
            "building tree 280 of 400\n",
            "building tree 281 of 400\n",
            "building tree 282 of 400\n",
            "building tree 283 of 400\n",
            "building tree 284 of 400\n",
            "building tree 285 of 400\n",
            "building tree 286 of 400\n",
            "building tree 287 of 400\n",
            "building tree 288 of 400\n",
            "building tree 289 of 400\n",
            "building tree 290 of 400\n",
            "building tree 291 of 400\n",
            "building tree 292 of 400\n",
            "building tree 293 of 400\n",
            "building tree 294 of 400\n",
            "building tree 295 of 400\n",
            "building tree 296 of 400\n",
            "building tree 297 of 400\n",
            "building tree 298 of 400\n",
            "building tree 299 of 400\n",
            "building tree 300 of 400\n",
            "building tree 301 of 400\n",
            "building tree 302 of 400\n",
            "building tree 303 of 400\n",
            "building tree 304 of 400\n",
            "building tree 305 of 400\n",
            "building tree 306 of 400\n",
            "building tree 307 of 400\n",
            "building tree 308 of 400\n",
            "building tree 309 of 400\n",
            "building tree 310 of 400\n",
            "building tree 311 of 400\n",
            "building tree 312 of 400\n",
            "building tree 313 of 400\n",
            "building tree 314 of 400\n",
            "building tree 315 of 400\n",
            "building tree 316 of 400\n",
            "building tree 317 of 400\n",
            "building tree 318 of 400\n",
            "building tree 319 of 400\n",
            "building tree 320 of 400\n",
            "building tree 321 of 400\n",
            "building tree 322 of 400\n",
            "building tree 323 of 400\n",
            "building tree 324 of 400\n",
            "building tree 325 of 400\n",
            "building tree 326 of 400\n",
            "building tree 327 of 400\n",
            "building tree 328 of 400\n",
            "building tree 329 of 400\n",
            "building tree 330 of 400\n",
            "building tree 331 of 400\n",
            "building tree 332 of 400\n",
            "building tree 333 of 400\n",
            "building tree 334 of 400\n",
            "building tree 335 of 400\n",
            "building tree 336 of 400\n",
            "building tree 337 of 400\n",
            "building tree 338 of 400\n",
            "building tree 339 of 400\n",
            "building tree 340 of 400\n",
            "building tree 341 of 400\n",
            "building tree 342 of 400\n",
            "building tree 343 of 400\n",
            "building tree 344 of 400\n",
            "building tree 345 of 400\n",
            "building tree 346 of 400\n",
            "building tree 347 of 400\n",
            "building tree 348 of 400\n",
            "building tree 349 of 400\n",
            "building tree 350 of 400\n",
            "building tree 351 of 400\n",
            "building tree 352 of 400\n",
            "building tree 353 of 400\n",
            "building tree 354 of 400\n",
            "building tree 355 of 400\n",
            "building tree 356 of 400\n",
            "building tree 357 of 400\n",
            "building tree 358 of 400\n",
            "building tree 359 of 400\n",
            "building tree 360 of 400\n",
            "building tree 361 of 400\n",
            "building tree 362 of 400\n",
            "building tree 363 of 400\n",
            "building tree 364 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 361 tasks      | elapsed:   18.9s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 365 of 400\n",
            "building tree 366 of 400\n",
            "building tree 367 of 400\n",
            "building tree 368 of 400\n",
            "building tree 369 of 400\n",
            "building tree 370 of 400\n",
            "building tree 371 of 400\n",
            "building tree 372 of 400\n",
            "building tree 373 of 400\n",
            "building tree 374 of 400\n",
            "building tree 375 of 400\n",
            "building tree 376 of 400\n",
            "building tree 377 of 400\n",
            "building tree 378 of 400\n",
            "building tree 379 of 400\n",
            "building tree 380 of 400\n",
            "building tree 381 of 400\n",
            "building tree 382 of 400\n",
            "building tree 383 of 400\n",
            "building tree 384 of 400\n",
            "building tree 385 of 400\n",
            "building tree 386 of 400\n",
            "building tree 387 of 400\n",
            "building tree 388 of 400\n",
            "building tree 389 of 400\n",
            "building tree 390 of 400\n",
            "building tree 391 of 400\n",
            "building tree 392 of 400\n",
            "building tree 393 of 400\n",
            "building tree 394 of 400\n",
            "building tree 395 of 400\n",
            "building tree 396 of 400\n",
            "building tree 397 of 400\n",
            "building tree 398 of 400\n",
            "building tree 399 of 400\n",
            "building tree 400 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 400 out of 400 | elapsed:   20.9s finished\n",
            "[Parallel(n_jobs=2)]: Using backend ThreadingBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=2)]: Done  37 tasks      | elapsed:    0.0s\n",
            "[Parallel(n_jobs=2)]: Done 158 tasks      | elapsed:    0.2s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix\n",
            "[[4380  867]\n",
            " [ 203  475]]\n",
            "\n",
            "\n",
            "Accuracy is 0.8194092827004219\n",
            "\n",
            "\n",
            "Kappa is 0.37531703417997964\n",
            "\n",
            "\n",
            "--- Run Time 0.36 mins ---\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=2)]: Done 361 tasks      | elapsed:    0.4s\n",
            "[Parallel(n_jobs=2)]: Done 400 out of 400 | elapsed:    0.5s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PAIBC3HunFaG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "outputId": "841baa79-493c-486c-a982-8acf07175c92"
      },
      "source": [
        "df.groupby(['default_payment','PAY_0'])['default_payment'].count()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "default_payment  PAY_0\n",
              "0                -2        2376\n",
              "                 -1        4685\n",
              "                  0       12678\n",
              "                  1        2402\n",
              "                  2         809\n",
              "                  3          75\n",
              "                  4          24\n",
              "                  5          12\n",
              "                  6           5\n",
              "                  7           2\n",
              "                  8           8\n",
              "1                -2         362\n",
              "                 -1         944\n",
              "                  0        1854\n",
              "                  1        1233\n",
              "                  2        1825\n",
              "                  3         240\n",
              "                  4          52\n",
              "                  5          13\n",
              "                  6           6\n",
              "                  7           7\n",
              "                  8          11\n",
              "Name: default_payment, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "619XHIuKqteR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "a66fd957-05eb-4155-d9a9-fcc39c6c6183"
      },
      "source": [
        "X,y = X_Y(df,'default_payment')\n",
        "\n",
        "\n",
        "# Separate input features and target\n",
        "\n",
        "# setting up testing and training sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=27)\n",
        "\n",
        "# concatenate our training data back together\n",
        "X = pd.concat([X_train, y_train], axis=1)\n",
        "\n",
        "# separate minority and majority classes\n",
        "not_default = X[X.default_payment==0]\n",
        "default = X[X.default_payment==1]\n",
        "\n",
        "# upsample minority\n",
        "default_upsampled = resample(default,\n",
        "                          replace=True, # sample with replacement\n",
        "                          n_samples=len(not_default), # match number in majority class\n",
        "                          random_state=42) # reproducible results\n",
        "\n",
        "# combine majority and upsampled minority\n",
        "upsampled = pd.concat([not_default, default_upsampled])\n",
        "\n",
        "# check new class counts\n",
        "upsampled.default_payment.value_counts()\n",
        "    "
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    18493\n",
              "0    18493\n",
              "Name: default_payment, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "In7Jbv61vYLo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_train = upsampled.default_payment\n",
        "X_train = upsampled.drop('default_payment', axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hLZzgYITxkoN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "fdf4d659-6a8e-43b1-d175-0194497d6d7f"
      },
      "source": [
        "y_test.value_counts()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    4583\n",
              "1    1342\n",
              "Name: default_payment, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SmNpSQMVv9Mb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "f7c3b3e8-3f82-4b79-e448-0d6480b59b83"
      },
      "source": [
        "start_time = time.time()\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators = 400 , verbose = 2,n_jobs=-1) \n",
        "\n",
        "\n",
        "rfc.fit(X_train,y_train)\n",
        "\n",
        "predictions = rfc.predict(X_test)\n",
        "\n",
        "print(\"Confusion Matrix\")\n",
        "print(confusion_matrix(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Accuracy is\",accuracy_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Kappa is\",cohen_kappa_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"--- Run Time %s mins ---\" %np.round(((time.time()-start_time)/60),2))\n",
        "print(\"\\n\")\n",
        "\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 2 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 2 of 400building tree 1 of 400\n",
            "\n",
            "building tree 3 of 400\n",
            "building tree 4 of 400\n",
            "building tree 5 of 400\n",
            "building tree 6 of 400\n",
            "building tree 7 of 400\n",
            "building tree 8 of 400\n",
            "building tree 9 of 400\n",
            "building tree 10 of 400\n",
            "building tree 11 of 400\n",
            "building tree 12 of 400\n",
            "building tree 13 of 400\n",
            "building tree 14 of 400\n",
            "building tree 15 of 400\n",
            "building tree 16 of 400\n",
            "building tree 17 of 400\n",
            "building tree 18 of 400\n",
            "building tree 19 of 400\n",
            "building tree 20 of 400\n",
            "building tree 21 of 400\n",
            "building tree 22 of 400\n",
            "building tree 23 of 400\n",
            "building tree 24 of 400\n",
            "building tree 25 of 400\n",
            "building tree 26 of 400\n",
            "building tree 27 of 400\n",
            "building tree 28 of 400\n",
            "building tree 29 of 400\n",
            "building tree 30 of 400\n",
            "building tree 31 of 400\n",
            "building tree 32 of 400\n",
            "building tree 33 of 400\n",
            "building tree 34 of 400\n",
            "building tree 35 of 400\n",
            "building tree 36 of 400\n",
            "building tree 37 of 400\n",
            "building tree 38 of 400\n",
            "building tree 39 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:    3.0s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 40 of 400\n",
            "building tree 41 of 400\n",
            "building tree 42 of 400\n",
            "building tree 43 of 400\n",
            "building tree 44 of 400\n",
            "building tree 45 of 400\n",
            "building tree 46 of 400\n",
            "building tree 47 of 400\n",
            "building tree 48 of 400\n",
            "building tree 49 of 400\n",
            "building tree 50 of 400\n",
            "building tree 51 of 400\n",
            "building tree 52 of 400\n",
            "building tree 53 of 400\n",
            "building tree 54 of 400\n",
            "building tree 55 of 400\n",
            "building tree 56 of 400\n",
            "building tree 57 of 400\n",
            "building tree 58 of 400\n",
            "building tree 59 of 400\n",
            "building tree 60 of 400\n",
            "building tree 61 of 400\n",
            "building tree 62 of 400\n",
            "building tree 63 of 400\n",
            "building tree 64 of 400\n",
            "building tree 65 of 400\n",
            "building tree 66 of 400\n",
            "building tree 67 of 400building tree 68 of 400\n",
            "\n",
            "building tree 69 of 400\n",
            "building tree 70 of 400\n",
            "building tree 71 of 400\n",
            "building tree 72 of 400\n",
            "building tree 73 of 400\n",
            "building tree 74 of 400\n",
            "building tree 75 of 400\n",
            "building tree 76 of 400\n",
            "building tree 77 of 400\n",
            "building tree 78 of 400\n",
            "building tree 79 of 400\n",
            "building tree 80 of 400\n",
            "building tree 81 of 400\n",
            "building tree 82 of 400\n",
            "building tree 83 of 400\n",
            "building tree 84 of 400\n",
            "building tree 85 of 400\n",
            "building tree 86 of 400\n",
            "building tree 87 of 400\n",
            "building tree 88 of 400\n",
            "building tree 89 of 400\n",
            "building tree 90 of 400\n",
            "building tree 91 of 400\n",
            "building tree 92 of 400\n",
            "building tree 93 of 400\n",
            "building tree 94 of 400\n",
            "building tree 95 of 400\n",
            "building tree 96 of 400\n",
            "building tree 97 of 400\n",
            "building tree 98 of 400\n",
            "building tree 99 of 400\n",
            "building tree 100 of 400\n",
            "building tree 101 of 400\n",
            "building tree 102 of 400\n",
            "building tree 103 of 400\n",
            "building tree 104 of 400\n",
            "building tree 105 of 400\n",
            "building tree 106 of 400\n",
            "building tree 107 of 400\n",
            "building tree 108 of 400\n",
            "building tree 109 of 400\n",
            "building tree 110 of 400\n",
            "building tree 111 of 400\n",
            "building tree 112 of 400\n",
            "building tree 113 of 400\n",
            "building tree 114 of 400\n",
            "building tree 115 of 400\n",
            "building tree 116 of 400\n",
            "building tree 117 of 400\n",
            "building tree 118 of 400\n",
            "building tree 119 of 400\n",
            "building tree 120 of 400\n",
            "building tree 121 of 400\n",
            "building tree 122 of 400\n",
            "building tree 123 of 400\n",
            "building tree 124 of 400\n",
            "building tree 125 of 400\n",
            "building tree 126 of 400\n",
            "building tree 127 of 400\n",
            "building tree 128 of 400\n",
            "building tree 129 of 400\n",
            "building tree 130 of 400\n",
            "building tree 131 of 400\n",
            "building tree 132 of 400\n",
            "building tree 133 of 400\n",
            "building tree 134 of 400\n",
            "building tree 135 of 400\n",
            "building tree 136 of 400\n",
            "building tree 137 of 400\n",
            "building tree 138 of 400\n",
            "building tree 139 of 400\n",
            "building tree 140 of 400\n",
            "building tree 141 of 400\n",
            "building tree 142 of 400\n",
            "building tree 143 of 400\n",
            "building tree 144 of 400\n",
            "building tree 145 of 400\n",
            "building tree 146 of 400\n",
            "building tree 147 of 400\n",
            "building tree 148 of 400\n",
            "building tree 149 of 400\n",
            "building tree 150 of 400\n",
            "building tree 151 of 400\n",
            "building tree 152 of 400\n",
            "building tree 153 of 400\n",
            "building tree 154 of 400\n",
            "building tree 155 of 400\n",
            "building tree 156 of 400\n",
            "building tree 157 of 400\n",
            "building tree 158 of 400\n",
            "building tree 159 of 400\n",
            "building tree 160 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 158 tasks      | elapsed:   12.9s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 161 of 400\n",
            "building tree 162 of 400\n",
            "building tree 163 of 400\n",
            "building tree 164 of 400\n",
            "building tree 165 of 400\n",
            "building tree 166 of 400\n",
            "building tree 167 of 400\n",
            "building tree 168 of 400\n",
            "building tree 169 of 400\n",
            "building tree 170 of 400\n",
            "building tree 171 of 400\n",
            "building tree 172 of 400\n",
            "building tree 173 of 400\n",
            "building tree 174 of 400\n",
            "building tree 175 of 400\n",
            "building tree 176 of 400\n",
            "building tree 177 of 400\n",
            "building tree 178 of 400\n",
            "building tree 179 of 400\n",
            "building tree 180 of 400\n",
            "building tree 181 of 400\n",
            "building tree 182 of 400\n",
            "building tree 183 of 400\n",
            "building tree 184 of 400\n",
            "building tree 185 of 400\n",
            "building tree 186 of 400\n",
            "building tree 187 of 400\n",
            "building tree 188 of 400\n",
            "building tree 189 of 400\n",
            "building tree 190 of 400\n",
            "building tree 191 of 400\n",
            "building tree 192 of 400\n",
            "building tree 193 of 400\n",
            "building tree 194 of 400\n",
            "building tree 195 of 400\n",
            "building tree 196 of 400\n",
            "building tree 197 of 400\n",
            "building tree 198 of 400\n",
            "building tree 199 of 400\n",
            "building tree 200 of 400\n",
            "building tree 201 of 400\n",
            "building tree 202 of 400\n",
            "building tree 203 of 400\n",
            "building tree 204 of 400\n",
            "building tree 205 of 400\n",
            "building tree 206 of 400\n",
            "building tree 207 of 400\n",
            "building tree 208 of 400\n",
            "building tree 209 of 400\n",
            "building tree 210 of 400\n",
            "building tree 211 of 400\n",
            "building tree 212 of 400\n",
            "building tree 213 of 400\n",
            "building tree 214 of 400\n",
            "building tree 215 of 400\n",
            "building tree 216 of 400\n",
            "building tree 217 of 400\n",
            "building tree 218 of 400\n",
            "building tree 219 of 400\n",
            "building tree 220 of 400\n",
            "building tree 221 of 400\n",
            "building tree 222 of 400\n",
            "building tree 223 of 400\n",
            "building tree 224 of 400\n",
            "building tree 225 of 400\n",
            "building tree 226 of 400\n",
            "building tree 227 of 400\n",
            "building tree 228 of 400\n",
            "building tree 229 of 400\n",
            "building tree 230 of 400\n",
            "building tree 231 of 400\n",
            "building tree 232 of 400\n",
            "building tree 233 of 400\n",
            "building tree 234 of 400\n",
            "building tree 235 of 400\n",
            "building tree 236 of 400\n",
            "building tree 237 of 400\n",
            "building tree 238 of 400\n",
            "building tree 239 of 400\n",
            "building tree 240 of 400\n",
            "building tree 241 of 400\n",
            "building tree 242 of 400\n",
            "building tree 243 of 400\n",
            "building tree 244 of 400\n",
            "building tree 245 of 400\n",
            "building tree 246 of 400\n",
            "building tree 247 of 400\n",
            "building tree 248 of 400\n",
            "building tree 249 of 400\n",
            "building tree 250 of 400\n",
            "building tree 251 of 400\n",
            "building tree 252 of 400\n",
            "building tree 253 of 400\n",
            "building tree 254 of 400\n",
            "building tree 255 of 400\n",
            "building tree 256 of 400\n",
            "building tree 257 of 400\n",
            "building tree 258 of 400\n",
            "building tree 259 of 400\n",
            "building tree 260 of 400\n",
            "building tree 261 of 400\n",
            "building tree 262 of 400\n",
            "building tree 263 of 400\n",
            "building tree 264 of 400\n",
            "building tree 265 of 400\n",
            "building tree 266 of 400\n",
            "building tree 267 of 400\n",
            "building tree 268 of 400\n",
            "building tree 269 of 400\n",
            "building tree 270 of 400\n",
            "building tree 271 of 400\n",
            "building tree 272 of 400\n",
            "building tree 273 of 400\n",
            "building tree 274 of 400\n",
            "building tree 275 of 400\n",
            "building tree 276 of 400\n",
            "building tree 277 of 400\n",
            "building tree 278 of 400\n",
            "building tree 279 of 400\n",
            "building tree 280 of 400\n",
            "building tree 281 of 400\n",
            "building tree 282 of 400\n",
            "building tree 283 of 400\n",
            "building tree 284 of 400\n",
            "building tree 285 of 400\n",
            "building tree 286 of 400\n",
            "building tree 287 of 400\n",
            "building tree 288 of 400\n",
            "building tree 289 of 400\n",
            "building tree 290 of 400\n",
            "building tree 291 of 400\n",
            "building tree 292 of 400\n",
            "building tree 293 of 400\n",
            "building tree 294 of 400\n",
            "building tree 295 of 400\n",
            "building tree 296 of 400\n",
            "building tree 297 of 400\n",
            "building tree 298 of 400\n",
            "building tree 299 of 400\n",
            "building tree 300 of 400\n",
            "building tree 301 of 400\n",
            "building tree 302 of 400\n",
            "building tree 303 of 400\n",
            "building tree 304 of 400\n",
            "building tree 305 of 400\n",
            "building tree 306 of 400\n",
            "building tree 307 of 400\n",
            "building tree 308 of 400\n",
            "building tree 309 of 400\n",
            "building tree 310 of 400\n",
            "building tree 311 of 400\n",
            "building tree 312 of 400\n",
            "building tree 313 of 400\n",
            "building tree 314 of 400\n",
            "building tree 315 of 400\n",
            "building tree 316 of 400\n",
            "building tree 317 of 400\n",
            "building tree 318 of 400\n",
            "building tree 319 of 400\n",
            "building tree 320 of 400\n",
            "building tree 321 of 400\n",
            "building tree 322 of 400\n",
            "building tree 323 of 400\n",
            "building tree 324 of 400\n",
            "building tree 325 of 400\n",
            "building tree 326 of 400\n",
            "building tree 327 of 400\n",
            "building tree 328 of 400\n",
            "building tree 329 of 400\n",
            "building tree 330 of 400\n",
            "building tree 331 of 400\n",
            "building tree 332 of 400\n",
            "building tree 333 of 400\n",
            "building tree 334 of 400\n",
            "building tree 335 of 400\n",
            "building tree 336 of 400\n",
            "building tree 337 of 400\n",
            "building tree 338 of 400\n",
            "building tree 339 of 400\n",
            "building tree 340 of 400\n",
            "building tree 341 of 400\n",
            "building tree 342 of 400\n",
            "building tree 344 of 400building tree 343 of 400\n",
            "\n",
            "building tree 345 of 400\n",
            "building tree 346 of 400\n",
            "building tree 347 of 400\n",
            "building tree 348 of 400\n",
            "building tree 349 of 400\n",
            "building tree 350 of 400\n",
            "building tree 351 of 400\n",
            "building tree 352 of 400\n",
            "building tree 353 of 400\n",
            "building tree 354 of 400\n",
            "building tree 355 of 400\n",
            "building tree 356 of 400\n",
            "building tree 357 of 400\n",
            "building tree 358 of 400\n",
            "building tree 359 of 400\n",
            "building tree 360 of 400\n",
            "building tree 361 of 400\n",
            "building tree 362 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 361 tasks      | elapsed:   29.3s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 363 of 400\n",
            "building tree 364 of 400\n",
            "building tree 365 of 400\n",
            "building tree 366 of 400\n",
            "building tree 367 of 400\n",
            "building tree 368 of 400\n",
            "building tree 369 of 400\n",
            "building tree 370 of 400\n",
            "building tree 371 of 400\n",
            "building tree 372 of 400\n",
            "building tree 373 of 400\n",
            "building tree 374 of 400\n",
            "building tree 375 of 400\n",
            "building tree 376 of 400\n",
            "building tree 377 of 400\n",
            "building tree 378 of 400\n",
            "building tree 379 of 400\n",
            "building tree 380 of 400\n",
            "building tree 381 of 400\n",
            "building tree 382 of 400\n",
            "building tree 383 of 400\n",
            "building tree 384 of 400\n",
            "building tree 385 of 400\n",
            "building tree 386 of 400\n",
            "building tree 387 of 400\n",
            "building tree 388 of 400\n",
            "building tree 389 of 400\n",
            "building tree 390 of 400\n",
            "building tree 391 of 400\n",
            "building tree 392 of 400\n",
            "building tree 393 of 400\n",
            "building tree 394 of 400\n",
            "building tree 395 of 400\n",
            "building tree 396 of 400\n",
            "building tree 397 of 400\n",
            "building tree 398 of 400\n",
            "building tree 399 of 400\n",
            "building tree 400 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 400 out of 400 | elapsed:   32.4s finished\n",
            "[Parallel(n_jobs=2)]: Using backend ThreadingBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=2)]: Done  37 tasks      | elapsed:    0.1s\n",
            "[Parallel(n_jobs=2)]: Done 158 tasks      | elapsed:    0.2s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix\n",
            "[[4306  796]\n",
            " [ 277  546]]\n",
            "\n",
            "\n",
            "Accuracy is 0.8189029535864979\n",
            "\n",
            "\n",
            "Kappa is 0.4012893112174917\n",
            "\n",
            "\n",
            "--- Run Time 0.56 mins ---\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=2)]: Done 361 tasks      | elapsed:    0.5s\n",
            "[Parallel(n_jobs=2)]: Done 400 out of 400 | elapsed:    0.5s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XHaWpjlbwW5w",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "7739f7ea-8c49-4b37-d28f-7bfa0878034b"
      },
      "source": [
        "\n",
        "# downsample majority\n",
        "not_fraud_downsampled = resample(not_default,\n",
        "                                replace = False, # sample without replacement\n",
        "                                n_samples = len(default), # match minority n\n",
        "                                random_state = 42) # reproducible results\n",
        "\n",
        "# combine minority and downsampled majority\n",
        "downsampled = pd.concat([not_fraud_downsampled, default])\n",
        "\n",
        "# checking counts\n",
        "downsampled.default_payment.value_counts()\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    5205\n",
              "0    5205\n",
              "Name: default_payment, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mb6lMoELwZBj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_train = downsampled.default_payment\n",
        "X_train = downsampled.drop('default_payment', axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IGotMuMy0dO6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "8cb69cb2-7324-4b2f-a8a0-77ea7b080592"
      },
      "source": [
        "start_time = time.time()\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators = 400 , verbose = 2,n_jobs=-1) \n",
        "\n",
        "\n",
        "rfc.fit(X_train,y_train)\n",
        "\n",
        "predictions = rfc.predict(X_test)\n",
        "\n",
        "print(\"Confusion Matrix\")\n",
        "print(confusion_matrix(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Accuracy is\",accuracy_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Kappa is\",cohen_kappa_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"--- Run Time %s mins ---\" %np.round(((time.time()-start_time)/60),2))\n",
        "print(\"\\n\")\n",
        "\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 2 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 1 of 400\n",
            "building tree 2 of 400\n",
            "building tree 3 of 400\n",
            "building tree 4 of 400\n",
            "building tree 5 of 400\n",
            "building tree 6 of 400\n",
            "building tree 7 of 400\n",
            "building tree 8 of 400\n",
            "building tree 9 of 400\n",
            "building tree 10 of 400\n",
            "building tree 11 of 400\n",
            "building tree 12 of 400\n",
            "building tree 13 of 400\n",
            "building tree 14 of 400\n",
            "building tree 15 of 400\n",
            "building tree 16 of 400\n",
            "building tree 17 of 400\n",
            "building tree 18 of 400\n",
            "building tree 19 of 400\n",
            "building tree 20 of 400\n",
            "building tree 21 of 400\n",
            "building tree 22 of 400\n",
            "building tree 23 of 400\n",
            "building tree 24 of 400\n",
            "building tree 25 of 400\n",
            "building tree 26 of 400\n",
            "building tree 27 of 400\n",
            "building tree 28 of 400\n",
            "building tree 29 of 400\n",
            "building tree 30 of 400\n",
            "building tree 31 of 400\n",
            "building tree 32 of 400\n",
            "building tree 33 of 400\n",
            "building tree 34 of 400\n",
            "building tree 35 of 400\n",
            "building tree 36 of 400\n",
            "building tree 37 of 400\n",
            "building tree 38 of 400\n",
            "building tree 39 of 400\n",
            "building tree 40 of 400\n",
            "building tree 41 of 400\n",
            "building tree 42 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:    0.8s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 43 of 400\n",
            "building tree 44 of 400\n",
            "building tree 45 of 400\n",
            "building tree 46 of 400\n",
            "building tree 47 of 400\n",
            "building tree 48 of 400\n",
            "building tree 49 of 400\n",
            "building tree 50 of 400\n",
            "building tree 51 of 400\n",
            "building tree 52 of 400\n",
            "building tree 53 of 400\n",
            "building tree 55 of 400\n",
            "building tree 54 of 400\n",
            "building tree 56 of 400\n",
            "building tree 57 of 400\n",
            "building tree 58 of 400building tree 59 of 400\n",
            "\n",
            "building tree 61 of 400\n",
            "building tree 60 of 400\n",
            "building tree 63 of 400building tree 62 of 400\n",
            "\n",
            "building tree 64 of 400\n",
            "building tree 65 of 400\n",
            "building tree 66 of 400\n",
            "building tree 67 of 400\n",
            "building tree 68 of 400\n",
            "building tree 69 of 400\n",
            "building tree 70 of 400\n",
            "building tree 71 of 400\n",
            "building tree 72 of 400\n",
            "building tree 73 of 400\n",
            "building tree 74 of 400building tree 75 of 400\n",
            "\n",
            "building tree 76 of 400\n",
            "building tree 77 of 400\n",
            "building tree 78 of 400building tree 79 of 400\n",
            "\n",
            "building tree 80 of 400\n",
            "building tree 81 of 400\n",
            "building tree 82 of 400\n",
            "building tree 83 of 400\n",
            "building tree 84 of 400\n",
            "building tree 85 of 400\n",
            "building tree 86 of 400\n",
            "building tree 87 of 400\n",
            "building tree 88 of 400\n",
            "building tree 89 of 400\n",
            "building tree 90 of 400\n",
            "building tree 91 of 400\n",
            "building tree 92 of 400\n",
            "building tree 93 of 400\n",
            "building tree 94 of 400\n",
            "building tree 95 of 400\n",
            "building tree 96 of 400\n",
            "building tree 97 of 400\n",
            "building tree 98 of 400\n",
            "building tree 99 of 400\n",
            "building tree 100 of 400\n",
            "building tree 101 of 400\n",
            "building tree 102 of 400\n",
            "building tree 103 of 400\n",
            "building tree 104 of 400\n",
            "building tree 105 of 400\n",
            "building tree 106 of 400building tree 107 of 400\n",
            "\n",
            "building tree 108 of 400\n",
            "building tree 109 of 400\n",
            "building tree 110 of 400building tree 111 of 400\n",
            "\n",
            "building tree 112 of 400\n",
            "building tree 113 of 400\n",
            "building tree 114 of 400building tree 115 of 400\n",
            "\n",
            "building tree 116 of 400\n",
            "building tree 117 of 400\n",
            "building tree 118 of 400\n",
            "building tree 119 of 400\n",
            "building tree 120 of 400\n",
            "building tree 121 of 400\n",
            "building tree 122 of 400\n",
            "building tree 123 of 400\n",
            "building tree 124 of 400\n",
            "building tree 125 of 400\n",
            "building tree 126 of 400\n",
            "building tree 127 of 400\n",
            "building tree 128 of 400\n",
            "building tree 129 of 400\n",
            "building tree 130 of 400\n",
            "building tree 131 of 400\n",
            "building tree 132 of 400\n",
            "building tree 133 of 400\n",
            "building tree 134 of 400\n",
            "building tree 135 of 400\n",
            "building tree 136 of 400\n",
            "building tree 137 of 400\n",
            "building tree 138 of 400\n",
            "building tree 139 of 400\n",
            "building tree 140 of 400\n",
            "building tree 141 of 400\n",
            "building tree 142 of 400\n",
            "building tree 143 of 400\n",
            "building tree 144 of 400\n",
            "building tree 145 of 400\n",
            "building tree 146 of 400\n",
            "building tree 147 of 400\n",
            "building tree 148 of 400\n",
            "building tree 149 of 400\n",
            "building tree 150 of 400\n",
            "building tree 151 of 400\n",
            "building tree 152 of 400\n",
            "building tree 153 of 400\n",
            "building tree 154 of 400\n",
            "building tree 155 of 400\n",
            "building tree 156 of 400\n",
            "building tree 157 of 400\n",
            "building tree 158 of 400\n",
            "building tree 159 of 400\n",
            "building tree 160 of 400\n",
            "building tree 161 of 400\n",
            "building tree 162 of 400\n",
            "building tree 163 of 400\n",
            "building tree 164 of 400\n",
            "building tree 165 of 400\n",
            "building tree 166 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 158 tasks      | elapsed:    3.3s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 167 of 400\n",
            "building tree 168 of 400\n",
            "building tree 169 of 400\n",
            "building tree 170 of 400\n",
            "building tree 171 of 400\n",
            "building tree 172 of 400\n",
            "building tree 173 of 400\n",
            "building tree 174 of 400\n",
            "building tree 175 of 400\n",
            "building tree 176 of 400\n",
            "building tree 177 of 400\n",
            "building tree 178 of 400\n",
            "building tree 179 of 400\n",
            "building tree 180 of 400\n",
            "building tree 181 of 400\n",
            "building tree 182 of 400\n",
            "building tree 183 of 400\n",
            "building tree 184 of 400\n",
            "building tree 185 of 400\n",
            "building tree 186 of 400\n",
            "building tree 187 of 400\n",
            "building tree 188 of 400\n",
            "building tree 189 of 400\n",
            "building tree 190 of 400\n",
            "building tree 191 of 400\n",
            "building tree 192 of 400\n",
            "building tree 193 of 400\n",
            "building tree 194 of 400\n",
            "building tree 195 of 400\n",
            "building tree 196 of 400\n",
            "building tree 197 of 400\n",
            "building tree 198 of 400\n",
            "building tree 199 of 400\n",
            "building tree 200 of 400\n",
            "building tree 201 of 400\n",
            "building tree 202 of 400\n",
            "building tree 203 of 400\n",
            "building tree 204 of 400\n",
            "building tree 205 of 400\n",
            "building tree 206 of 400\n",
            "building tree 207 of 400\n",
            "building tree 208 of 400\n",
            "building tree 209 of 400\n",
            "building tree 210 of 400\n",
            "building tree 211 of 400\n",
            "building tree 212 of 400\n",
            "building tree 213 of 400\n",
            "building tree 214 of 400\n",
            "building tree 215 of 400\n",
            "building tree 216 of 400\n",
            "building tree 217 of 400\n",
            "building tree 218 of 400\n",
            "building tree 219 of 400\n",
            "building tree 220 of 400\n",
            "building tree 221 of 400\n",
            "building tree 222 of 400\n",
            "building tree 223 of 400\n",
            "building tree 224 of 400\n",
            "building tree 225 of 400\n",
            "building tree 226 of 400\n",
            "building tree 227 of 400\n",
            "building tree 228 of 400\n",
            "building tree 229 of 400\n",
            "building tree 230 of 400\n",
            "building tree 231 of 400\n",
            "building tree 232 of 400\n",
            "building tree 233 of 400\n",
            "building tree 234 of 400\n",
            "building tree 235 of 400\n",
            "building tree 236 of 400\n",
            "building tree 237 of 400\n",
            "building tree 238 of 400\n",
            "building tree 239 of 400\n",
            "building tree 240 of 400\n",
            "building tree 241 of 400\n",
            "building tree 242 of 400\n",
            "building tree 243 of 400\n",
            "building tree 244 of 400\n",
            "building tree 245 of 400\n",
            "building tree 246 of 400\n",
            "building tree 247 of 400\n",
            "building tree 248 of 400\n",
            "building tree 249 of 400\n",
            "building tree 250 of 400\n",
            "building tree 251 of 400\n",
            "building tree 252 of 400\n",
            "building tree 253 of 400\n",
            "building tree 254 of 400\n",
            "building tree 255 of 400\n",
            "building tree 256 of 400\n",
            "building tree 257 of 400\n",
            "building tree 258 of 400\n",
            "building tree 259 of 400\n",
            "building tree 260 of 400\n",
            "building tree 261 of 400\n",
            "building tree 262 of 400\n",
            "building tree 263 of 400\n",
            "building tree 264 of 400\n",
            "building tree 265 of 400\n",
            "building tree 266 of 400\n",
            "building tree 267 of 400\n",
            "building tree 268 of 400\n",
            "building tree 269 of 400\n",
            "building tree 270 of 400\n",
            "building tree 271 of 400\n",
            "building tree 272 of 400\n",
            "building tree 273 of 400\n",
            "building tree 274 of 400\n",
            "building tree 275 of 400\n",
            "building tree 276 of 400\n",
            "building tree 277 of 400\n",
            "building tree 278 of 400\n",
            "building tree 279 of 400\n",
            "building tree 280 of 400\n",
            "building tree 281 of 400\n",
            "building tree 282 of 400\n",
            "building tree 283 of 400\n",
            "building tree 284 of 400\n",
            "building tree 285 of 400\n",
            "building tree 286 of 400\n",
            "building tree 288 of 400\n",
            "building tree 287 of 400\n",
            "building tree 289 of 400\n",
            "building tree 290 of 400\n",
            "building tree 291 of 400\n",
            "building tree 292 of 400\n",
            "building tree 293 of 400\n",
            "building tree 294 of 400\n",
            "building tree 295 of 400\n",
            "building tree 296 of 400\n",
            "building tree 297 of 400\n",
            "building tree 298 of 400\n",
            "building tree 299 of 400\n",
            "building tree 300 of 400\n",
            "building tree 301 of 400\n",
            "building tree 302 of 400\n",
            "building tree 303 of 400\n",
            "building tree 304 of 400\n",
            "building tree 305 of 400\n",
            "building tree 306 of 400\n",
            "building tree 307 of 400\n",
            "building tree 308 of 400\n",
            "building tree 309 of 400\n",
            "building tree 310 of 400\n",
            "building tree 311 of 400\n",
            "building tree 312 of 400\n",
            "building tree 313 of 400\n",
            "building tree 314 of 400\n",
            "building tree 315 of 400\n",
            "building tree 316 of 400\n",
            "building tree 317 of 400\n",
            "building tree 318 of 400\n",
            "building tree 319 of 400\n",
            "building tree 320 of 400\n",
            "building tree 321 of 400\n",
            "building tree 322 of 400\n",
            "building tree 323 of 400\n",
            "building tree 324 of 400\n",
            "building tree 325 of 400\n",
            "building tree 326 of 400\n",
            "building tree 327 of 400\n",
            "building tree 328 of 400\n",
            "building tree 329 of 400\n",
            "building tree 330 of 400\n",
            "building tree 331 of 400\n",
            "building tree 332 of 400\n",
            "building tree 333 of 400\n",
            "building tree 334 of 400\n",
            "building tree 335 of 400\n",
            "building tree 336 of 400\n",
            "building tree 337 of 400\n",
            "building tree 338 of 400\n",
            "building tree 339 of 400\n",
            "building tree 340 of 400\n",
            "building tree 341 of 400\n",
            "building tree 342 of 400\n",
            "building tree 343 of 400\n",
            "building tree 344 of 400\n",
            "building tree 345 of 400\n",
            "building tree 346 of 400\n",
            "building tree 347 of 400\n",
            "building tree 348 of 400\n",
            "building tree 349 of 400\n",
            "building tree 350 of 400\n",
            "building tree 351 of 400\n",
            "building tree 352 of 400\n",
            "building tree 353 of 400\n",
            "building tree 354 of 400\n",
            "building tree 355 of 400\n",
            "building tree 356 of 400\n",
            "building tree 357 of 400\n",
            "building tree 358 of 400\n",
            "building tree 359 of 400\n",
            "building tree 360 of 400\n",
            "building tree 361 of 400\n",
            "building tree 362 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 361 tasks      | elapsed:    7.5s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 363 of 400\n",
            "building tree 364 of 400\n",
            "building tree 365 of 400\n",
            "building tree 366 of 400\n",
            "building tree 367 of 400\n",
            "building tree 368 of 400\n",
            "building tree 369 of 400\n",
            "building tree 370 of 400\n",
            "building tree 371 of 400\n",
            "building tree 372 of 400\n",
            "building tree 373 of 400\n",
            "building tree 374 of 400\n",
            "building tree 375 of 400\n",
            "building tree 376 of 400\n",
            "building tree 377 of 400\n",
            "building tree 378 of 400\n",
            "building tree 379 of 400\n",
            "building tree 380 of 400\n",
            "building tree 381 of 400\n",
            "building tree 382 of 400\n",
            "building tree 383 of 400\n",
            "building tree 384 of 400\n",
            "building tree 385 of 400\n",
            "building tree 386 of 400\n",
            "building tree 387 of 400\n",
            "building tree 388 of 400\n",
            "building tree 389 of 400\n",
            "building tree 390 of 400\n",
            "building tree 391 of 400\n",
            "building tree 392 of 400\n",
            "building tree 393 of 400\n",
            "building tree 394 of 400\n",
            "building tree 395 of 400\n",
            "building tree 396 of 400\n",
            "building tree 397 of 400\n",
            "building tree 398 of 400\n",
            "building tree 399 of 400\n",
            "building tree 400 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 400 out of 400 | elapsed:    8.3s finished\n",
            "[Parallel(n_jobs=2)]: Using backend ThreadingBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=2)]: Done  37 tasks      | elapsed:    0.0s\n",
            "[Parallel(n_jobs=2)]: Done 158 tasks      | elapsed:    0.2s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix\n",
            "[[3593  477]\n",
            " [ 990  865]]\n",
            "\n",
            "\n",
            "Accuracy is 0.7524050632911392\n",
            "\n",
            "\n",
            "Kappa is 0.37751751811252343\n",
            "\n",
            "\n",
            "--- Run Time 0.15 mins ---\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=2)]: Done 361 tasks      | elapsed:    0.4s\n",
            "[Parallel(n_jobs=2)]: Done 400 out of 400 | elapsed:    0.4s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JN_uEnvB646a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X,y = X_Y(df,'default_payment')\n",
        "\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=27,shuffle=True)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FQXvJTfx0ffM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sm = SMOTE(random_state=27, ratio=1.0)\n",
        "X_train, y_train = sm.fit_sample(X_train, y_train)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "plE0gVPk2wMZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "8f651cdf-05ae-4435-eb3e-edeb25974cf8"
      },
      "source": [
        "display(np.array(np.unique(y_train, return_counts= True)).T)\n",
        "np.array(np.unique(y_test, return_counts= True)).T"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array([[    0, 18493],\n",
              "       [    1, 18493]])"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   0, 4583],\n",
              "       [   1, 1342]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F7sT73cA2zb3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "31d9113a-9aa5-47b7-9287-e67d95d3185a"
      },
      "source": [
        "start_time = time.time()\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators = 400 , verbose = 2,n_jobs=-1) \n",
        "\n",
        "\n",
        "rfc.fit(X_train,y_train)\n",
        "\n",
        "predictions = rfc.predict(X_test)\n",
        "\n",
        "print(\"Confusion Matrix\")\n",
        "print(confusion_matrix(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Accuracy is\",accuracy_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"Kappa is\",cohen_kappa_score(predictions,y_test))\n",
        "print(\"\\n\")\n",
        "print(\"--- Run Time %s mins ---\" %np.round(((time.time()-start_time)/60),2))\n",
        "print(\"\\n\")\n",
        "\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 2 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 2 of 400\n",
            "building tree 1 of 400\n",
            "building tree 3 of 400\n",
            "building tree 4 of 400\n",
            "building tree 5 of 400\n",
            "building tree 6 of 400\n",
            "building tree 7 of 400\n",
            "building tree 8 of 400\n",
            "building tree 9 of 400\n",
            "building tree 10 of 400\n",
            "building tree 11 of 400\n",
            "building tree 12 of 400\n",
            "building tree 13 of 400\n",
            "building tree 14 of 400\n",
            "building tree 15 of 400\n",
            "building tree 16 of 400\n",
            "building tree 17 of 400\n",
            "building tree 18 of 400\n",
            "building tree 19 of 400\n",
            "building tree 20 of 400\n",
            "building tree 21 of 400\n",
            "building tree 22 of 400\n",
            "building tree 23 of 400\n",
            "building tree 24 of 400\n",
            "building tree 25 of 400\n",
            "building tree 26 of 400\n",
            "building tree 27 of 400\n",
            "building tree 28 of 400\n",
            "building tree 29 of 400\n",
            "building tree 30 of 400\n",
            "building tree 31 of 400\n",
            "building tree 32 of 400\n",
            "building tree 33 of 400\n",
            "building tree 34 of 400\n",
            "building tree 35 of 400\n",
            "building tree 36 of 400\n",
            "building tree 37 of 400\n",
            "building tree 38 of 400\n",
            "building tree 39 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:    2.8s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 40 of 400\n",
            "building tree 41 of 400\n",
            "building tree 42 of 400\n",
            "building tree 43 of 400\n",
            "building tree 44 of 400\n",
            "building tree 45 of 400\n",
            "building tree 46 of 400\n",
            "building tree 47 of 400\n",
            "building tree 48 of 400\n",
            "building tree 49 of 400\n",
            "building tree 50 of 400\n",
            "building tree 51 of 400\n",
            "building tree 52 of 400\n",
            "building tree 53 of 400\n",
            "building tree 54 of 400\n",
            "building tree 55 of 400\n",
            "building tree 56 of 400\n",
            "building tree 57 of 400\n",
            "building tree 58 of 400\n",
            "building tree 59 of 400\n",
            "building tree 60 of 400\n",
            "building tree 61 of 400\n",
            "building tree 62 of 400\n",
            "building tree 63 of 400\n",
            "building tree 64 of 400\n",
            "building tree 65 of 400\n",
            "building tree 66 of 400\n",
            "building tree 67 of 400\n",
            "building tree 68 of 400\n",
            "building tree 69 of 400\n",
            "building tree 70 of 400\n",
            "building tree 71 of 400\n",
            "building tree 72 of 400\n",
            "building tree 73 of 400\n",
            "building tree 74 of 400\n",
            "building tree 75 of 400\n",
            "building tree 76 of 400\n",
            "building tree 77 of 400\n",
            "building tree 78 of 400\n",
            "building tree 79 of 400\n",
            "building tree 80 of 400\n",
            "building tree 81 of 400\n",
            "building tree 82 of 400\n",
            "building tree 83 of 400\n",
            "building tree 84 of 400\n",
            "building tree 85 of 400\n",
            "building tree 86 of 400\n",
            "building tree 87 of 400\n",
            "building tree 88 of 400\n",
            "building tree 89 of 400\n",
            "building tree 90 of 400\n",
            "building tree 91 of 400\n",
            "building tree 92 of 400\n",
            "building tree 93 of 400\n",
            "building tree 94 of 400\n",
            "building tree 95 of 400\n",
            "building tree 96 of 400\n",
            "building tree 97 of 400\n",
            "building tree 98 of 400\n",
            "building tree 99 of 400\n",
            "building tree 100 of 400\n",
            "building tree 101 of 400\n",
            "building tree 102 of 400\n",
            "building tree 103 of 400\n",
            "building tree 104 of 400\n",
            "building tree 105 of 400\n",
            "building tree 106 of 400\n",
            "building tree 107 of 400\n",
            "building tree 108 of 400\n",
            "building tree 109 of 400\n",
            "building tree 110 of 400\n",
            "building tree 111 of 400\n",
            "building tree 112 of 400\n",
            "building tree 113 of 400\n",
            "building tree 114 of 400\n",
            "building tree 115 of 400\n",
            "building tree 116 of 400\n",
            "building tree 117 of 400\n",
            "building tree 118 of 400\n",
            "building tree 119 of 400\n",
            "building tree 120 of 400\n",
            "building tree 121 of 400\n",
            "building tree 122 of 400\n",
            "building tree 123 of 400\n",
            "building tree 124 of 400\n",
            "building tree 125 of 400\n",
            "building tree 126 of 400\n",
            "building tree 127 of 400\n",
            "building tree 128 of 400\n",
            "building tree 129 of 400\n",
            "building tree 130 of 400\n",
            "building tree 131 of 400\n",
            "building tree 132 of 400\n",
            "building tree 133 of 400\n",
            "building tree 134 of 400\n",
            "building tree 135 of 400\n",
            "building tree 136 of 400\n",
            "building tree 137 of 400\n",
            "building tree 138 of 400\n",
            "building tree 139 of 400\n",
            "building tree 140 of 400\n",
            "building tree 141 of 400\n",
            "building tree 142 of 400\n",
            "building tree 143 of 400\n",
            "building tree 144 of 400\n",
            "building tree 145 of 400\n",
            "building tree 146 of 400\n",
            "building tree 147 of 400\n",
            "building tree 148 of 400\n",
            "building tree 149 of 400\n",
            "building tree 150 of 400\n",
            "building tree 151 of 400\n",
            "building tree 152 of 400\n",
            "building tree 153 of 400\n",
            "building tree 154 of 400\n",
            "building tree 155 of 400\n",
            "building tree 156 of 400\n",
            "building tree 157 of 400\n",
            "building tree 158 of 400\n",
            "building tree 159 of 400\n",
            "building tree 160 of 400\n",
            "building tree 161 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 158 tasks      | elapsed:   12.7s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 162 of 400\n",
            "building tree 163 of 400\n",
            "building tree 164 of 400\n",
            "building tree 165 of 400\n",
            "building tree 166 of 400\n",
            "building tree 167 of 400\n",
            "building tree 168 of 400\n",
            "building tree 169 of 400\n",
            "building tree 170 of 400\n",
            "building tree 171 of 400\n",
            "building tree 172 of 400\n",
            "building tree 173 of 400\n",
            "building tree 174 of 400\n",
            "building tree 175 of 400\n",
            "building tree 176 of 400\n",
            "building tree 177 of 400\n",
            "building tree 178 of 400\n",
            "building tree 179 of 400\n",
            "building tree 180 of 400\n",
            "building tree 181 of 400\n",
            "building tree 182 of 400\n",
            "building tree 183 of 400\n",
            "building tree 184 of 400\n",
            "building tree 185 of 400\n",
            "building tree 186 of 400\n",
            "building tree 187 of 400\n",
            "building tree 188 of 400\n",
            "building tree 189 of 400\n",
            "building tree 190 of 400\n",
            "building tree 191 of 400\n",
            "building tree 192 of 400\n",
            "building tree 193 of 400\n",
            "building tree 194 of 400\n",
            "building tree 195 of 400\n",
            "building tree 196 of 400\n",
            "building tree 197 of 400\n",
            "building tree 198 of 400\n",
            "building tree 199 of 400\n",
            "building tree 200 of 400\n",
            "building tree 201 of 400\n",
            "building tree 202 of 400\n",
            "building tree 204 of 400building tree 203 of 400\n",
            "\n",
            "building tree 205 of 400\n",
            "building tree 206 of 400\n",
            "building tree 207 of 400\n",
            "building tree 208 of 400\n",
            "building tree 209 of 400\n",
            "building tree 210 of 400\n",
            "building tree 211 of 400\n",
            "building tree 212 of 400\n",
            "building tree 213 of 400\n",
            "building tree 214 of 400\n",
            "building tree 215 of 400\n",
            "building tree 216 of 400\n",
            "building tree 217 of 400\n",
            "building tree 218 of 400\n",
            "building tree 219 of 400\n",
            "building tree 220 of 400\n",
            "building tree 221 of 400\n",
            "building tree 222 of 400\n",
            "building tree 223 of 400\n",
            "building tree 224 of 400\n",
            "building tree 225 of 400\n",
            "building tree 226 of 400\n",
            "building tree 227 of 400\n",
            "building tree 228 of 400\n",
            "building tree 229 of 400\n",
            "building tree 230 of 400\n",
            "building tree 231 of 400\n",
            "building tree 232 of 400\n",
            "building tree 233 of 400\n",
            "building tree 234 of 400\n",
            "building tree 235 of 400\n",
            "building tree 236 of 400\n",
            "building tree 237 of 400\n",
            "building tree 238 of 400\n",
            "building tree 239 of 400\n",
            "building tree 240 of 400\n",
            "building tree 241 of 400\n",
            "building tree 242 of 400\n",
            "building tree 243 of 400\n",
            "building tree 244 of 400\n",
            "building tree 245 of 400\n",
            "building tree 246 of 400\n",
            "building tree 247 of 400\n",
            "building tree 248 of 400\n",
            "building tree 249 of 400\n",
            "building tree 250 of 400\n",
            "building tree 251 of 400\n",
            "building tree 252 of 400\n",
            "building tree 253 of 400\n",
            "building tree 254 of 400\n",
            "building tree 255 of 400\n",
            "building tree 256 of 400\n",
            "building tree 257 of 400\n",
            "building tree 258 of 400\n",
            "building tree 259 of 400\n",
            "building tree 260 of 400\n",
            "building tree 261 of 400\n",
            "building tree 262 of 400\n",
            "building tree 263 of 400\n",
            "building tree 264 of 400\n",
            "building tree 265 of 400\n",
            "building tree 266 of 400\n",
            "building tree 267 of 400\n",
            "building tree 268 of 400\n",
            "building tree 269 of 400\n",
            "building tree 270 of 400\n",
            "building tree 271 of 400\n",
            "building tree 272 of 400\n",
            "building tree 273 of 400\n",
            "building tree 274 of 400\n",
            "building tree 275 of 400\n",
            "building tree 276 of 400\n",
            "building tree 277 of 400\n",
            "building tree 278 of 400\n",
            "building tree 279 of 400\n",
            "building tree 280 of 400\n",
            "building tree 281 of 400\n",
            "building tree 282 of 400\n",
            "building tree 283 of 400\n",
            "building tree 284 of 400\n",
            "building tree 285 of 400\n",
            "building tree 286 of 400\n",
            "building tree 287 of 400\n",
            "building tree 288 of 400\n",
            "building tree 289 of 400\n",
            "building tree 290 of 400\n",
            "building tree 291 of 400\n",
            "building tree 292 of 400\n",
            "building tree 293 of 400\n",
            "building tree 294 of 400\n",
            "building tree 295 of 400\n",
            "building tree 296 of 400\n",
            "building tree 297 of 400\n",
            "building tree 298 of 400\n",
            "building tree 299 of 400\n",
            "building tree 300 of 400\n",
            "building tree 301 of 400\n",
            "building tree 302 of 400\n",
            "building tree 303 of 400\n",
            "building tree 304 of 400\n",
            "building tree 305 of 400\n",
            "building tree 306 of 400\n",
            "building tree 307 of 400\n",
            "building tree 308 of 400\n",
            "building tree 309 of 400\n",
            "building tree 310 of 400\n",
            "building tree 311 of 400\n",
            "building tree 312 of 400\n",
            "building tree 313 of 400\n",
            "building tree 314 of 400\n",
            "building tree 315 of 400\n",
            "building tree 316 of 400\n",
            "building tree 317 of 400\n",
            "building tree 318 of 400\n",
            "building tree 319 of 400\n",
            "building tree 320 of 400\n",
            "building tree 321 of 400\n",
            "building tree 322 of 400\n",
            "building tree 323 of 400\n",
            "building tree 324 of 400\n",
            "building tree 325 of 400\n",
            "building tree 326 of 400\n",
            "building tree 327 of 400\n",
            "building tree 328 of 400\n",
            "building tree 329 of 400\n",
            "building tree 330 of 400\n",
            "building tree 331 of 400\n",
            "building tree 332 of 400\n",
            "building tree 333 of 400\n",
            "building tree 334 of 400\n",
            "building tree 335 of 400\n",
            "building tree 336 of 400\n",
            "building tree 337 of 400\n",
            "building tree 338 of 400\n",
            "building tree 339 of 400\n",
            "building tree 340 of 400\n",
            "building tree 341 of 400\n",
            "building tree 342 of 400\n",
            "building tree 343 of 400\n",
            "building tree 344 of 400\n",
            "building tree 345 of 400\n",
            "building tree 346 of 400\n",
            "building tree 347 of 400\n",
            "building tree 348 of 400\n",
            "building tree 349 of 400\n",
            "building tree 350 of 400\n",
            "building tree 351 of 400\n",
            "building tree 352 of 400\n",
            "building tree 353 of 400\n",
            "building tree 354 of 400\n",
            "building tree 355 of 400\n",
            "building tree 356 of 400\n",
            "building tree 357 of 400\n",
            "building tree 358 of 400\n",
            "building tree 359 of 400\n",
            "building tree 360 of 400\n",
            "building tree 361 of 400\n",
            "building tree 362 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 361 tasks      | elapsed:   29.4s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "building tree 363 of 400\n",
            "building tree 364 of 400\n",
            "building tree 365 of 400\n",
            "building tree 366 of 400\n",
            "building tree 367 of 400\n",
            "building tree 368 of 400\n",
            "building tree 369 of 400\n",
            "building tree 370 of 400\n",
            "building tree 371 of 400\n",
            "building tree 372 of 400\n",
            "building tree 373 of 400\n",
            "building tree 374 of 400\n",
            "building tree 375 of 400\n",
            "building tree 376 of 400\n",
            "building tree 377 of 400\n",
            "building tree 378 of 400\n",
            "building tree 379 of 400\n",
            "building tree 380 of 400\n",
            "building tree 381 of 400\n",
            "building tree 382 of 400\n",
            "building tree 383 of 400\n",
            "building tree 384 of 400\n",
            "building tree 385 of 400\n",
            "building tree 386 of 400\n",
            "building tree 387 of 400\n",
            "building tree 388 of 400\n",
            "building tree 389 of 400\n",
            "building tree 390 of 400\n",
            "building tree 391 of 400\n",
            "building tree 392 of 400\n",
            "building tree 393 of 400\n",
            "building tree 394 of 400\n",
            "building tree 395 of 400\n",
            "building tree 396 of 400\n",
            "building tree 397 of 400\n",
            "building tree 398 of 400\n",
            "building tree 399 of 400\n",
            "building tree 400 of 400\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 400 out of 400 | elapsed:   32.6s finished\n",
            "[Parallel(n_jobs=2)]: Using backend ThreadingBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=2)]: Done  37 tasks      | elapsed:    0.0s\n",
            "[Parallel(n_jobs=2)]: Done 158 tasks      | elapsed:    0.2s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix\n",
            "[[4326  817]\n",
            " [ 257  525]]\n",
            "\n",
            "\n",
            "Accuracy is 0.8187341772151899\n",
            "\n",
            "\n",
            "Kappa is 0.39313712662405165\n",
            "\n",
            "\n",
            "--- Run Time 0.56 mins ---\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=2)]: Done 361 tasks      | elapsed:    0.4s\n",
            "[Parallel(n_jobs=2)]: Done 400 out of 400 | elapsed:    0.5s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3k7RQdIr4Del",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}